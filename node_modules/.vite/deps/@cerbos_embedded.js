import {
  __commonJS,
  __publicField
} from "./chunk-WXXH56N5.js";

// node_modules/@cerbos/core/lib/protobuf/cerbos/effect/v1/effect.js
var require_effect = __commonJS({
  "node_modules/@cerbos/core/lib/protobuf/cerbos/effect/v1/effect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Effect = exports.protobufPackage = void 0;
    exports.protobufPackage = "cerbos.effect.v1";
    var Effect;
    (function(Effect2) {
      Effect2[Effect2["EFFECT_UNSPECIFIED"] = 0] = "EFFECT_UNSPECIFIED";
      Effect2[Effect2["EFFECT_ALLOW"] = 1] = "EFFECT_ALLOW";
      Effect2[Effect2["EFFECT_DENY"] = 2] = "EFFECT_DENY";
      Effect2[Effect2["EFFECT_NO_MATCH"] = 3] = "EFFECT_NO_MATCH";
    })(Effect || (exports.Effect = Effect = {}));
  }
});

// node_modules/@cerbos/core/lib/protobuf/cerbos/engine/v1/engine.js
var require_engine = __commonJS({
  "node_modules/@cerbos/core/lib/protobuf/cerbos/engine/v1/engine.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlanResourcesFilter_Kind = exports.protobufPackage = void 0;
    exports.protobufPackage = "cerbos.engine.v1";
    var PlanResourcesFilter_Kind;
    (function(PlanResourcesFilter_Kind2) {
      PlanResourcesFilter_Kind2[PlanResourcesFilter_Kind2["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
      PlanResourcesFilter_Kind2[PlanResourcesFilter_Kind2["KIND_ALWAYS_ALLOWED"] = 1] = "KIND_ALWAYS_ALLOWED";
      PlanResourcesFilter_Kind2[PlanResourcesFilter_Kind2["KIND_ALWAYS_DENIED"] = 2] = "KIND_ALWAYS_DENIED";
      PlanResourcesFilter_Kind2[PlanResourcesFilter_Kind2["KIND_CONDITIONAL"] = 3] = "KIND_CONDITIONAL";
    })(PlanResourcesFilter_Kind || (exports.PlanResourcesFilter_Kind = PlanResourcesFilter_Kind = {}));
  }
});

// node_modules/@cerbos/core/lib/protobuf/cerbos/schema/v1/schema.js
var require_schema = __commonJS({
  "node_modules/@cerbos/core/lib/protobuf/cerbos/schema/v1/schema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError_Source = exports.protobufPackage = void 0;
    exports.protobufPackage = "cerbos.schema.v1";
    var ValidationError_Source;
    (function(ValidationError_Source2) {
      ValidationError_Source2[ValidationError_Source2["SOURCE_UNSPECIFIED"] = 0] = "SOURCE_UNSPECIFIED";
      ValidationError_Source2[ValidationError_Source2["SOURCE_PRINCIPAL"] = 1] = "SOURCE_PRINCIPAL";
      ValidationError_Source2[ValidationError_Source2["SOURCE_RESOURCE"] = 2] = "SOURCE_RESOURCE";
    })(ValidationError_Source || (exports.ValidationError_Source = ValidationError_Source = {}));
  }
});

// node_modules/@cerbos/core/lib/types/external/AddOrUpdatePoliciesRequest.js
var require_AddOrUpdatePoliciesRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/AddOrUpdatePoliciesRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/AddOrUpdateSchemasRequest.js
var require_AddOrUpdateSchemasRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/AddOrUpdateSchemasRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/AuxData.js
var require_AuxData = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/AuxData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/CheckResourceRequest.js
var require_CheckResourceRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/CheckResourceRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/CheckResourcesRequest.js
var require_CheckResourcesRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/CheckResourcesRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/CheckResourcesResponse.js
var require_CheckResourcesResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/CheckResourcesResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CheckResourcesResponse = void 0;
    var CheckResourcesResponse = class {
      constructor({ requestId, results }) {
        /**
         * The identifier for tracing the request.
         */
        __publicField(this, "requestId");
        /**
         * The outcomes of the permission checks for each resource.
         */
        __publicField(this, "results");
        this.requestId = requestId;
        this.results = results;
      }
      /**
       * Check if the policy decision was that all input actions should be allowed for a resource.
       *
       * @param resource - the resource search criteria.
       * @returns `undefined` if the resource is not present in the results.
       */
      allAllowed(resource) {
        var _a;
        return (_a = this.findResult(resource)) == null ? void 0 : _a.allAllowed();
      }
      /**
       * List the actions that should be allowed for a resource.
       *
       * @param resource - the resource search criteria.
       * @returns `undefined` if the resource is not present in the results.
       */
      allowedActions(resource) {
        var _a;
        return (_a = this.findResult(resource)) == null ? void 0 : _a.allowedActions();
      }
      /**
       * Check if the policy decision was that an action should be allowed for a resource.
       *
       * @param check - the resource search criteria and action to check.
       * @returns `undefined` if the resource or action is not present in the results.
       */
      isAllowed(check) {
        var _a;
        return (_a = this.findResult(check.resource)) == null ? void 0 : _a.isAllowed(check.action);
      }
      /**
       * Find an item from {@link CheckResourcesResponse.results | results} by resource.
       *
       * @param resource - the resource search criteria.
       * @returns `undefined` if the resource is not present in the results.
       */
      findResult(resource) {
        const { kind, id, policyVersion, scope } = resource;
        return this.results.find(({ resource: resource2 }) => resource2.kind === kind && resource2.id === id && (policyVersion === void 0 || resource2.policyVersion === policyVersion) && (scope === void 0 || resource2.scope === scope));
      }
      /**
       * Unique schema validation errors for the principal or resource attributes.
       */
      get validationErrors() {
        const unique = {};
        this.results.forEach(({ validationErrors }) => {
          validationErrors.forEach((validationError) => {
            const { path, message, source } = validationError;
            unique[`${path}:${message}:${source}`] = validationError;
          });
        });
        return Object.values(unique);
      }
    };
    exports.CheckResourcesResponse = CheckResourcesResponse;
  }
});

// node_modules/@cerbos/core/lib/types/external/Effect.js
var require_Effect = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Effect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Effect = void 0;
    var Effect;
    (function(Effect2) {
      Effect2["ALLOW"] = "EFFECT_ALLOW";
      Effect2["DENY"] = "EFFECT_DENY";
    })(Effect || (exports.Effect = Effect = {}));
  }
});

// node_modules/@cerbos/core/lib/types/external/CheckResourcesResult.js
var require_CheckResourcesResult = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/CheckResourcesResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CheckResourcesResult = void 0;
    var Effect_1 = require_Effect();
    var CheckResourcesResult = class {
      constructor({ resource, actions, validationErrors, metadata, outputs }) {
        /**
         * The resource that was checked.
         */
        __publicField(this, "resource");
        /**
         * The policy decisions for each action.
         */
        __publicField(this, "actions");
        /**
         * Any schema validation errors for the principal or resource attributes.
         */
        __publicField(this, "validationErrors");
        /**
         * Additional information about how the policy decisions were reached.
         *
         * @remarks
         * `undefined` if {@link CheckResourcesRequest.includeMetadata | includeMetadata} was `false`.
         */
        __publicField(this, "metadata");
        /**
         * User-defined outputs from policy rule evaluations.
         *
         * @remarks
         * Requires the Cerbos policy decision point server to be at least v0.27.
         */
        __publicField(this, "outputs");
        this.resource = resource;
        this.actions = actions;
        this.validationErrors = validationErrors;
        this.metadata = metadata;
        this.outputs = outputs;
      }
      /**
       * Check if the policy decision was that all input actions should be allowed for the resource.
       */
      allAllowed() {
        return Object.values(this.actions).every((effect) => effect === Effect_1.Effect.ALLOW);
      }
      /**
       * List the actions that should be allowed for the resource.
       */
      allowedActions() {
        return Object.keys(this.actions).filter((action) => this.actions[action] === Effect_1.Effect.ALLOW);
      }
      /**
       * Check if the policy decision was that a given action should be allowed for the resource.
       *
       * @param action - the action to check.
       * @returns `undefined` if the action is not present in the results.
       */
      isAllowed(action) {
        switch (this.actions[action]) {
          case Effect_1.Effect.ALLOW:
            return true;
          case Effect_1.Effect.DENY:
            return false;
          default:
            return void 0;
        }
      }
      /**
       * Find the value of the user-defined output for a particular policy rule.
       *
       * @param source - the identifier of the policy rule that produced the output.
       * @returns `undefined` if the result does not include an output for the source.
       *
       * @remarks
       * Requires the Cerbos policy decision point server to be at least v0.27.
       */
      output(source) {
        var _a;
        return (_a = this.outputs.find((output) => output.source === source)) == null ? void 0 : _a.value;
      }
    };
    exports.CheckResourcesResult = CheckResourcesResult;
  }
});

// node_modules/@cerbos/core/lib/types/external/CheckResourcesResultMetadata.js
var require_CheckResourcesResultMetadata = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/CheckResourcesResultMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/CheckResourcesResultMetadataEffect.js
var require_CheckResourcesResultMetadataEffect = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/CheckResourcesResultMetadataEffect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/CheckResourcesResultResource.js
var require_CheckResourcesResultResource = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/CheckResourcesResultResource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Condition.js
var require_Condition = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Condition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/DeleteSchemasRequest.js
var require_DeleteSchemasRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/DeleteSchemasRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/DeleteSchemasResponse.js
var require_DeleteSchemasResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/DeleteSchemasResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/DerivedRoleDefinition.js
var require_DerivedRoleDefinition = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/DerivedRoleDefinition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/DerivedRoles.js
var require_DerivedRoles = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/DerivedRoles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/DerivedRolesBody.js
var require_DerivedRolesBody = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/DerivedRolesBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/DisablePoliciesRequest.js
var require_DisablePoliciesRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/DisablePoliciesRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/DisablePoliciesResponse.js
var require_DisablePoliciesResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/DisablePoliciesResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/EnablePoliciesRequest.js
var require_EnablePoliciesRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/EnablePoliciesRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/EnablePoliciesResponse.js
var require_EnablePoliciesResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/EnablePoliciesResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ExportVariables.js
var require_ExportVariables = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ExportVariables.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ExportVariablesBody.js
var require_ExportVariablesBody = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ExportVariablesBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/GetPoliciesRequest.js
var require_GetPoliciesRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/GetPoliciesRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/GetPoliciesResponse.js
var require_GetPoliciesResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/GetPoliciesResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/GetSchemasRequest.js
var require_GetSchemasRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/GetSchemasRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/GetSchemasResponse.js
var require_GetSchemasResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/GetSchemasResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/IsAllowedRequest.js
var require_IsAllowedRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/IsAllowedRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/JWT.js
var require_JWT = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/JWT.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ListPoliciesRequest.js
var require_ListPoliciesRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ListPoliciesRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ListPoliciesResponse.js
var require_ListPoliciesResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ListPoliciesResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ListSchemasResponse.js
var require_ListSchemasResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ListSchemasResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Match.js
var require_Match = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Match.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.matchIsMatchExpr = exports.matchIsMatchNone = exports.matchIsMatchAny = exports.matchIsMatchAll = void 0;
    function matchIsMatchAll(match) {
      return "all" in match;
    }
    exports.matchIsMatchAll = matchIsMatchAll;
    function matchIsMatchAny(match) {
      return "any" in match;
    }
    exports.matchIsMatchAny = matchIsMatchAny;
    function matchIsMatchNone(match) {
      return "none" in match;
    }
    exports.matchIsMatchNone = matchIsMatchNone;
    function matchIsMatchExpr(match) {
      return "expr" in match;
    }
    exports.matchIsMatchExpr = matchIsMatchExpr;
  }
});

// node_modules/@cerbos/core/lib/types/external/MatchAll.js
var require_MatchAll = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/MatchAll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/MatchAny.js
var require_MatchAny = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/MatchAny.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/MatchExpr.js
var require_MatchExpr = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/MatchExpr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/MatchNone.js
var require_MatchNone = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/MatchNone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Matches.js
var require_Matches = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Matches.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Output.js
var require_Output = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Output.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/OutputExpressions.js
var require_OutputExpressions = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/OutputExpressions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/OutputResult.js
var require_OutputResult = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/OutputResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanExpression.js
var require_PlanExpression = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanExpression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlanExpression = void 0;
    var PlanExpression = class {
      constructor(operator, operands) {
        __publicField(this, "operator");
        __publicField(this, "operands");
        this.operator = operator;
        this.operands = operands;
      }
    };
    exports.PlanExpression = PlanExpression;
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanExpressionOperand.js
var require_PlanExpressionOperand = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanExpressionOperand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanExpressionValue.js
var require_PlanExpressionValue = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanExpressionValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlanExpressionValue = void 0;
    var PlanExpressionValue = class {
      constructor(value) {
        __publicField(this, "value");
        this.value = value;
      }
    };
    exports.PlanExpressionValue = PlanExpressionValue;
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanExpressionVariable.js
var require_PlanExpressionVariable = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanExpressionVariable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlanExpressionVariable = void 0;
    var PlanExpressionVariable = class {
      constructor(name) {
        __publicField(this, "name");
        this.name = name;
      }
    };
    exports.PlanExpressionVariable = PlanExpressionVariable;
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanKind.js
var require_PlanKind = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanKind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlanKind = void 0;
    var PlanKind;
    (function(PlanKind2) {
      PlanKind2["ALWAYS_ALLOWED"] = "KIND_ALWAYS_ALLOWED";
      PlanKind2["ALWAYS_DENIED"] = "KIND_ALWAYS_DENIED";
      PlanKind2["CONDITIONAL"] = "KIND_CONDITIONAL";
    })(PlanKind || (exports.PlanKind = PlanKind = {}));
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanResourcesConditionalResponse.js
var require_PlanResourcesConditionalResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanResourcesConditionalResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanResourcesMetadata.js
var require_PlanResourcesMetadata = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanResourcesMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanResourcesRequest.js
var require_PlanResourcesRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanResourcesRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanResourcesResponse.js
var require_PlanResourcesResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanResourcesResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanResourcesResponseBase.js
var require_PlanResourcesResponseBase = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanResourcesResponseBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PlanResourcesUnconditionalResponse.js
var require_PlanResourcesUnconditionalResponse = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PlanResourcesUnconditionalResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Policy.js
var require_Policy = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Policy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.policyIsResourcePolicy = exports.policyIsPrincipalPolicy = exports.policyIsExportVariables = exports.policyIsDerivedRoles = void 0;
    function policyIsDerivedRoles(policy) {
      return "derivedRoles" in policy;
    }
    exports.policyIsDerivedRoles = policyIsDerivedRoles;
    function policyIsExportVariables(policy) {
      return "exportVariables" in policy;
    }
    exports.policyIsExportVariables = policyIsExportVariables;
    function policyIsPrincipalPolicy(policy) {
      return "principalPolicy" in policy;
    }
    exports.policyIsPrincipalPolicy = policyIsPrincipalPolicy;
    function policyIsResourcePolicy(policy) {
      return "resourcePolicy" in policy;
    }
    exports.policyIsResourcePolicy = policyIsResourcePolicy;
  }
});

// node_modules/@cerbos/core/lib/types/external/PolicyBase.js
var require_PolicyBase = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PolicyBase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PolicyMetadata.js
var require_PolicyMetadata = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PolicyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Principal.js
var require_Principal = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Principal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PrincipalPolicy.js
var require_PrincipalPolicy = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PrincipalPolicy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PrincipalPolicyBody.js
var require_PrincipalPolicyBody = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PrincipalPolicyBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PrincipalRule.js
var require_PrincipalRule = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PrincipalRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/PrincipalRuleAction.js
var require_PrincipalRuleAction = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/PrincipalRuleAction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ReloadStoreRequest.js
var require_ReloadStoreRequest = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ReloadStoreRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Resource.js
var require_Resource = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Resource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ResourceCheck.js
var require_ResourceCheck = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ResourceCheck.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ResourcePolicy.js
var require_ResourcePolicy = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ResourcePolicy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ResourcePolicyBody.js
var require_ResourcePolicyBody = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ResourcePolicyBody.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ResourceQuery.js
var require_ResourceQuery = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ResourceQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ResourceRule.js
var require_ResourceRule = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ResourceRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ResourceSearch.js
var require_ResourceSearch = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ResourceSearch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Schema.js
var require_Schema = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Schema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/internal.js
var require_internal = __commonJS({
  "node_modules/@cerbos/core/lib/types/internal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObject = void 0;
    function isObject(value) {
      return typeof value === "object" && value !== null && !Array.isArray(value);
    }
    exports.isObject = isObject;
  }
});

// node_modules/@cerbos/core/lib/types/external/SchemaDefinition.js
var require_SchemaDefinition = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/SchemaDefinition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SchemaDefinition = void 0;
    var internal_1 = require_internal();
    var decoder = new TextDecoder();
    var SchemaDefinition = class {
      constructor(bytes) {
        __publicField(this, "bytes");
        this.bytes = bytes;
      }
      /**
       * The parsed schema definition.
       */
      toObject() {
        const object = JSON.parse(this.toString());
        if (!(0, internal_1.isObject)(object)) {
          throw new Error("Schema definition is not an object");
        }
        return object;
      }
      /**
       * The JSON-serialized schema definition.
       */
      toString() {
        return decoder.decode(this.bytes);
      }
    };
    exports.SchemaDefinition = SchemaDefinition;
  }
});

// node_modules/@cerbos/core/lib/types/external/SchemaDefinitionInput.js
var require_SchemaDefinitionInput = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/SchemaDefinitionInput.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/SchemaInput.js
var require_SchemaInput = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/SchemaInput.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/SchemaRef.js
var require_SchemaRef = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/SchemaRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/SchemaRefs.js
var require_SchemaRefs = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/SchemaRefs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ServerInfo.js
var require_ServerInfo = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ServerInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ValidationError.js
var require_ValidationError = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ValidationError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/ValidationErrorSource.js
var require_ValidationErrorSource = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ValidationErrorSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationErrorSource = void 0;
    var ValidationErrorSource;
    (function(ValidationErrorSource2) {
      ValidationErrorSource2["PRINCIPAL"] = "SOURCE_PRINCIPAL";
      ValidationErrorSource2["RESOURCE"] = "SOURCE_RESOURCE";
    })(ValidationErrorSource || (exports.ValidationErrorSource = ValidationErrorSource = {}));
  }
});

// node_modules/@cerbos/core/lib/types/external/ValidationFailedCallback.js
var require_ValidationFailedCallback = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/ValidationFailedCallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Value.js
var require_Value = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Value.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/Variables.js
var require_Variables = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/Variables.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/types/external/index.js
var require_external = __commonJS({
  "node_modules/@cerbos/core/lib/types/external/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_AddOrUpdatePoliciesRequest(), exports);
    __exportStar(require_AddOrUpdateSchemasRequest(), exports);
    __exportStar(require_AuxData(), exports);
    __exportStar(require_CheckResourceRequest(), exports);
    __exportStar(require_CheckResourcesRequest(), exports);
    __exportStar(require_CheckResourcesResponse(), exports);
    __exportStar(require_CheckResourcesResult(), exports);
    __exportStar(require_CheckResourcesResultMetadata(), exports);
    __exportStar(require_CheckResourcesResultMetadataEffect(), exports);
    __exportStar(require_CheckResourcesResultResource(), exports);
    __exportStar(require_Condition(), exports);
    __exportStar(require_DeleteSchemasRequest(), exports);
    __exportStar(require_DeleteSchemasResponse(), exports);
    __exportStar(require_DerivedRoleDefinition(), exports);
    __exportStar(require_DerivedRoles(), exports);
    __exportStar(require_DerivedRolesBody(), exports);
    __exportStar(require_DisablePoliciesRequest(), exports);
    __exportStar(require_DisablePoliciesResponse(), exports);
    __exportStar(require_Effect(), exports);
    __exportStar(require_EnablePoliciesRequest(), exports);
    __exportStar(require_EnablePoliciesResponse(), exports);
    __exportStar(require_ExportVariables(), exports);
    __exportStar(require_ExportVariablesBody(), exports);
    __exportStar(require_GetPoliciesRequest(), exports);
    __exportStar(require_GetPoliciesResponse(), exports);
    __exportStar(require_GetSchemasRequest(), exports);
    __exportStar(require_GetSchemasResponse(), exports);
    __exportStar(require_IsAllowedRequest(), exports);
    __exportStar(require_JWT(), exports);
    __exportStar(require_ListPoliciesRequest(), exports);
    __exportStar(require_ListPoliciesResponse(), exports);
    __exportStar(require_ListSchemasResponse(), exports);
    __exportStar(require_Match(), exports);
    __exportStar(require_MatchAll(), exports);
    __exportStar(require_MatchAny(), exports);
    __exportStar(require_MatchExpr(), exports);
    __exportStar(require_MatchNone(), exports);
    __exportStar(require_Matches(), exports);
    __exportStar(require_Output(), exports);
    __exportStar(require_OutputExpressions(), exports);
    __exportStar(require_OutputResult(), exports);
    __exportStar(require_PlanExpression(), exports);
    __exportStar(require_PlanExpressionOperand(), exports);
    __exportStar(require_PlanExpressionValue(), exports);
    __exportStar(require_PlanExpressionVariable(), exports);
    __exportStar(require_PlanKind(), exports);
    __exportStar(require_PlanResourcesConditionalResponse(), exports);
    __exportStar(require_PlanResourcesMetadata(), exports);
    __exportStar(require_PlanResourcesRequest(), exports);
    __exportStar(require_PlanResourcesResponse(), exports);
    __exportStar(require_PlanResourcesResponseBase(), exports);
    __exportStar(require_PlanResourcesUnconditionalResponse(), exports);
    __exportStar(require_Policy(), exports);
    __exportStar(require_PolicyBase(), exports);
    __exportStar(require_PolicyMetadata(), exports);
    __exportStar(require_Principal(), exports);
    __exportStar(require_PrincipalPolicy(), exports);
    __exportStar(require_PrincipalPolicyBody(), exports);
    __exportStar(require_PrincipalRule(), exports);
    __exportStar(require_PrincipalRuleAction(), exports);
    __exportStar(require_ReloadStoreRequest(), exports);
    __exportStar(require_Resource(), exports);
    __exportStar(require_ResourceCheck(), exports);
    __exportStar(require_ResourcePolicy(), exports);
    __exportStar(require_ResourcePolicyBody(), exports);
    __exportStar(require_ResourceQuery(), exports);
    __exportStar(require_ResourceRule(), exports);
    __exportStar(require_ResourceSearch(), exports);
    __exportStar(require_Schema(), exports);
    __exportStar(require_SchemaDefinition(), exports);
    __exportStar(require_SchemaDefinitionInput(), exports);
    __exportStar(require_SchemaInput(), exports);
    __exportStar(require_SchemaRef(), exports);
    __exportStar(require_SchemaRefs(), exports);
    __exportStar(require_ServerInfo(), exports);
    __exportStar(require_ValidationError(), exports);
    __exportStar(require_ValidationErrorSource(), exports);
    __exportStar(require_ValidationFailedCallback(), exports);
    __exportStar(require_Value(), exports);
    __exportStar(require_Variables(), exports);
  }
});

// node_modules/@cerbos/core/lib/convert/fromProtobuf.js
var require_fromProtobuf = __commonJS({
  "node_modules/@cerbos/core/lib/convert/fromProtobuf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.planResourcesResponseFromProtobuf = exports.listSchemasResponseFromProtobuf = exports.listPoliciesResponseFromProtobuf = exports.getSchemasResponseFromProtobuf = exports._policyFromProtobuf = exports.getPoliciesResponseFromProtobuf = exports.enablePoliciesResponseFromProtobuf = exports.disablePoliciesResponseFromProtobuf = exports.deleteSchemasResponseFromProtobuf = exports.checkResourcesResponseFromProtobuf = void 0;
    var effect_1 = require_effect();
    var engine_1 = require_engine();
    var schema_1 = require_schema();
    var external_1 = require_external();
    function checkResourcesResponseFromProtobuf({ requestId, results }) {
      return new external_1.CheckResourcesResponse({
        requestId,
        results: results.map(checkResourcesResultFromProtobuf)
      });
    }
    exports.checkResourcesResponseFromProtobuf = checkResourcesResponseFromProtobuf;
    function checkResourcesResultFromProtobuf({ resource, actions, validationErrors, meta, outputs }) {
      if (!resource) {
        throw new Error("Missing resource on CheckResources result");
      }
      return new external_1.CheckResourcesResult({
        resource,
        actions: actionsFromProtobuf(actions),
        validationErrors: validationErrors.map(validationErrorFromProtobuf),
        metadata: meta,
        outputs: outputs.map(outputResultFromProtobuf)
      });
    }
    function actionsFromProtobuf(actions) {
      return Object.fromEntries(Object.entries(actions).map(([action, effect]) => [
        action,
        effectFromProtobuf(effect)
      ]));
    }
    function effectFromProtobuf(effect) {
      return effect === effect_1.Effect.EFFECT_ALLOW ? external_1.Effect.ALLOW : external_1.Effect.DENY;
    }
    function validationErrorFromProtobuf({ path, message, source }) {
      return {
        path,
        message,
        source: validationErrorSourceFromProtobuf(source)
      };
    }
    function validationErrorSourceFromProtobuf(source) {
      switch (source) {
        case schema_1.ValidationError_Source.SOURCE_PRINCIPAL:
          return external_1.ValidationErrorSource.PRINCIPAL;
        case schema_1.ValidationError_Source.SOURCE_RESOURCE:
          return external_1.ValidationErrorSource.RESOURCE;
        default:
          throw new Error(`Unexpected validation error source ${source} (${schema_1.ValidationError_Source[source] ?? "unrecognized"})`);
      }
    }
    function outputResultFromProtobuf({ src, val }) {
      return {
        source: src,
        value: val
      };
    }
    function deleteSchemasResponseFromProtobuf({ deletedSchemas }) {
      return {
        deletedSchemas
      };
    }
    exports.deleteSchemasResponseFromProtobuf = deleteSchemasResponseFromProtobuf;
    function disablePoliciesResponseFromProtobuf({ disabledPolicies }) {
      return {
        disabledPolicies
      };
    }
    exports.disablePoliciesResponseFromProtobuf = disablePoliciesResponseFromProtobuf;
    function enablePoliciesResponseFromProtobuf({ enabledPolicies }) {
      return {
        enabledPolicies
      };
    }
    exports.enablePoliciesResponseFromProtobuf = enablePoliciesResponseFromProtobuf;
    function getPoliciesResponseFromProtobuf({ policies }) {
      return {
        policies: policies.map(_policyFromProtobuf)
      };
    }
    exports.getPoliciesResponseFromProtobuf = getPoliciesResponseFromProtobuf;
    function _policyFromProtobuf({ apiVersion, description, disabled, metadata, variables, policyType }) {
      return {
        apiVersion,
        description,
        disabled,
        metadata: metadata && policyMetadataFromProtobuf(metadata),
        variables,
        ...policyTypeFromProtobuf(policyType)
      };
    }
    exports._policyFromProtobuf = _policyFromProtobuf;
    function policyMetadataFromProtobuf({ annotations, hash, sourceFile, storeIdentifer, storeIdentifier }) {
      return {
        annotations,
        hash,
        sourceFile,
        storeIdentifer: storeIdentifier || storeIdentifer,
        storeIdentifier: storeIdentifier || storeIdentifer
      };
    }
    function policyTypeFromProtobuf(policyType) {
      if (!policyType) {
        throw new Error("Unknown policy type: undefined");
      }
      switch (policyType.$case) {
        case "derivedRoles":
          return derivedRolesFromProtobuf(policyType.derivedRoles);
        case "exportVariables":
          return exportVariablesFromProtobuf(policyType.exportVariables);
        case "principalPolicy":
          return principalPolicyFromProtobuf(policyType.principalPolicy);
        case "resourcePolicy":
          return resourcePolicyFromProtobuf(policyType.resourcePolicy);
        default:
          throw new Error(`Unknown policy type: ${JSON.stringify(policyType, null, 2)}`);
      }
    }
    function derivedRolesFromProtobuf({ name, definitions, variables }) {
      return {
        derivedRoles: {
          name,
          definitions: definitions.map(derivedRoleDefinitionFromProtobuf),
          variables: variables && variablesFromProtobuf(variables)
        }
      };
    }
    function derivedRoleDefinitionFromProtobuf({ name, parentRoles, condition }) {
      return {
        name,
        parentRoles,
        condition: condition && conditionFromProtobuf(condition)
      };
    }
    function conditionFromProtobuf({ condition }) {
      switch (condition == null ? void 0 : condition.$case) {
        case "match":
          return {
            match: matchFromProtobuf(condition.match)
          };
        default:
          throw new Error(`Unknown condition type: ${JSON.stringify(condition, null, 2)}`);
      }
    }
    function matchFromProtobuf({ op }) {
      switch (op == null ? void 0 : op.$case) {
        case "all":
          return {
            all: matchesFromProtobuf(op.all)
          };
        case "any":
          return {
            any: matchesFromProtobuf(op.any)
          };
        case "none":
          return {
            none: matchesFromProtobuf(op.none)
          };
        case "expr":
          return {
            expr: op.expr
          };
        default:
          throw new Error(`Unknown match type: ${JSON.stringify(op, null, 2)}`);
      }
    }
    function matchesFromProtobuf({ of }) {
      return {
        of: of.map(matchFromProtobuf)
      };
    }
    function variablesFromProtobuf({ import: imports, local }) {
      return {
        import: imports,
        local
      };
    }
    function exportVariablesFromProtobuf({ name, definitions }) {
      return {
        exportVariables: {
          name,
          definitions
        }
      };
    }
    function principalPolicyFromProtobuf({ principal, version, rules, scope, variables }) {
      return {
        principalPolicy: {
          principal,
          version,
          rules: rules.map(principalRuleFromProtobuf),
          scope,
          variables: variables && variablesFromProtobuf(variables)
        }
      };
    }
    function principalRuleFromProtobuf({ resource, actions }) {
      return {
        resource,
        actions: actions.map(principalRuleActionFromProtobuf)
      };
    }
    function principalRuleActionFromProtobuf({ action, effect, condition, name, output }) {
      return {
        action,
        effect: effectFromProtobuf(effect),
        condition: condition && conditionFromProtobuf(condition),
        name,
        output: output && outputFromProtobuf(output)
      };
    }
    function outputFromProtobuf({ expr, when }) {
      const output = {};
      if (expr) {
        output.expr = expr;
      }
      if (when) {
        output.when = when;
      }
      return output;
    }
    function resourcePolicyFromProtobuf({ resource, version, importDerivedRoles, rules, schemas, scope, variables }) {
      return {
        resourcePolicy: {
          resource,
          version,
          importDerivedRoles,
          rules: rules.map(resourceRuleFromProtobuf),
          schemas: schemas && schemaRefsFromProtobuf(schemas),
          scope,
          variables: variables && variablesFromProtobuf(variables)
        }
      };
    }
    function resourceRuleFromProtobuf({ actions, effect, derivedRoles, roles, condition, name, output }) {
      return {
        actions,
        effect: effectFromProtobuf(effect),
        derivedRoles,
        roles,
        condition: condition && conditionFromProtobuf(condition),
        name,
        output: output && outputFromProtobuf(output)
      };
    }
    function schemaRefsFromProtobuf({ principalSchema, resourceSchema }) {
      return {
        principalSchema: principalSchema && schemaRefFromProtobuf(principalSchema),
        resourceSchema: resourceSchema && schemaRefFromProtobuf(resourceSchema)
      };
    }
    function schemaRefFromProtobuf({ ref, ignoreWhen }) {
      return {
        ref,
        ignoreWhen: ignoreWhen && {
          actions: ignoreWhen.actions
        }
      };
    }
    function getSchemasResponseFromProtobuf({ schemas }) {
      return {
        schemas: schemas.map(schemaFromProtobuf)
      };
    }
    exports.getSchemasResponseFromProtobuf = getSchemasResponseFromProtobuf;
    function schemaFromProtobuf({ id, definition }) {
      return {
        id,
        definition: new external_1.SchemaDefinition(definition)
      };
    }
    function listPoliciesResponseFromProtobuf({ policyIds }) {
      return {
        ids: policyIds
      };
    }
    exports.listPoliciesResponseFromProtobuf = listPoliciesResponseFromProtobuf;
    function listSchemasResponseFromProtobuf({ schemaIds }) {
      return {
        ids: schemaIds
      };
    }
    exports.listSchemasResponseFromProtobuf = listSchemasResponseFromProtobuf;
    function planResourcesResponseFromProtobuf({ requestId, filter, validationErrors, meta }) {
      if (!filter) {
        throw new Error("Missing filter on PlanResources response");
      }
      const kind = planKindFromProtobuf(filter.kind);
      const metadata = meta && planResourcesMetadataFromProtobuf(meta);
      if (kind === external_1.PlanKind.CONDITIONAL) {
        if (!filter.condition) {
          throw new Error("Missing filter condition on PlanResources response");
        }
        return {
          requestId,
          kind,
          condition: planOperandFromProtobuf(filter.condition),
          validationErrors: validationErrors.map(validationErrorFromProtobuf),
          metadata
        };
      }
      return {
        requestId,
        kind,
        validationErrors: validationErrors.map(validationErrorFromProtobuf),
        metadata
      };
    }
    exports.planResourcesResponseFromProtobuf = planResourcesResponseFromProtobuf;
    function planKindFromProtobuf(kind) {
      switch (kind) {
        case engine_1.PlanResourcesFilter_Kind.KIND_ALWAYS_ALLOWED:
          return external_1.PlanKind.ALWAYS_ALLOWED;
        case engine_1.PlanResourcesFilter_Kind.KIND_ALWAYS_DENIED:
          return external_1.PlanKind.ALWAYS_DENIED;
        case engine_1.PlanResourcesFilter_Kind.KIND_CONDITIONAL:
          return external_1.PlanKind.CONDITIONAL;
        default:
          throw new Error(`Unexpected PlanResources filter kind ${kind} (${engine_1.PlanResourcesFilter_Kind[kind] ?? "unrecognized"})`);
      }
    }
    function planOperandFromProtobuf({ node }) {
      if (!node) {
        throw new Error("Missing node on PlanResources expression operand");
      }
      switch (node.$case) {
        case "expression":
          return new external_1.PlanExpression(node.expression.operator, node.expression.operands.map(planOperandFromProtobuf));
        case "value":
          return new external_1.PlanExpressionValue(node.value ?? null);
        case "variable":
          return new external_1.PlanExpressionVariable(node.variable);
      }
    }
    function planResourcesMetadataFromProtobuf({ filterDebug, matchedScope }) {
      return {
        conditionString: filterDebug,
        matchedScope
      };
    }
  }
});

// node_modules/uuid/dist/commonjs-browser/rng.js
var require_rng = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      if (!getRandomValues) {
        getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
        if (!getRandomValues) {
          throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        }
      }
      return getRandomValues(rnds8);
    }
  }
});

// node_modules/uuid/dist/commonjs-browser/regex.js
var require_regex = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/validate.js
var require_validate = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/stringify.js
var require_stringify = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    exports.unsafeStringify = unsafeStringify;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    function unsafeStringify(arr, offset = 0) {
      return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
    }
    function stringify(arr, offset = 0) {
      const uuid = unsafeStringify(arr, offset);
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.unsafeStringify)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/parse.js
var require_parse = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v35.js
var require_v35 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.URL = exports.DNS = void 0;
    exports.default = v35;
    var _stringify = require_stringify();
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL2;
    function v35(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        var _namespace;
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.unsafeStringify)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/commonjs-browser/md5.js
var require_md5 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function md5(bytes) {
      if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes));
        bytes = new Uint8Array(msg.length);
        for (let i = 0; i < msg.length; ++i) {
          bytes[i] = msg.charCodeAt(i);
        }
      }
      return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
    }
    function md5ToHexEncodedArray(input) {
      const output = [];
      const length32 = input.length * 32;
      const hexTab = "0123456789abcdef";
      for (let i = 0; i < length32; i += 8) {
        const x = input[i >> 5] >>> i % 32 & 255;
        const hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
        output.push(hex);
      }
      return output;
    }
    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    function wordsToMd5(x, len) {
      x[len >> 5] |= 128 << len % 32;
      x[getOutputLength(len) - 1] = len;
      let a = 1732584193;
      let b = -271733879;
      let c = -1732584194;
      let d = 271733878;
      for (let i = 0; i < x.length; i += 16) {
        const olda = a;
        const oldb = b;
        const oldc = c;
        const oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return [a, b, c, d];
    }
    function bytesToWords(input) {
      if (input.length === 0) {
        return [];
      }
      const length8 = input.length * 8;
      const output = new Uint32Array(getOutputLength(length8));
      for (let i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input[i / 8] & 255) << i % 32;
      }
      return output;
    }
    function safeAdd(x, y) {
      const lsw = (x & 65535) + (y & 65535);
      const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    var _default = md5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v3.js
var require_v3 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/native.js
var require_native = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/native.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    var _default = {
      randomUUID
    };
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _native = _interopRequireDefault(require_native());
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      if (_native.default.randomUUID && !buf && !options) {
        return _native.default.randomUUID();
      }
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.unsafeStringify)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/sha1.js
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;
        case 1:
          return x ^ y ^ z;
        case 2:
          return x & y ^ x & z ^ y & z;
        case 3:
          return x ^ y ^ z;
      }
    }
    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }
    function sha1(bytes) {
      const K = [1518500249, 1859775393, 2400959708, 3395469782];
      const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes));
        bytes = [];
        for (let i = 0; i < msg.length; ++i) {
          bytes.push(msg.charCodeAt(i));
        }
      } else if (!Array.isArray(bytes)) {
        bytes = Array.prototype.slice.call(bytes);
      }
      bytes.push(128);
      const l = bytes.length / 4 + 2;
      const N = Math.ceil(l / 16);
      const M = new Array(N);
      for (let i = 0; i < N; ++i) {
        const arr = new Uint32Array(16);
        for (let j = 0; j < 16; ++j) {
          arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        }
        M[i] = arr;
      }
      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
      for (let i = 0; i < N; ++i) {
        const W = new Uint32Array(80);
        for (let t = 0; t < 16; ++t) {
          W[t] = M[i][t];
        }
        for (let t = 16; t < 80; ++t) {
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        }
        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];
        for (let t = 0; t < 80; ++t) {
          const s = Math.floor(t / 20);
          const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }
        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }
      return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
    }
    var _default = sha1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v5.js
var require_v5 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/nil.js
var require_nil = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/version.js
var require_version = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.slice(14, 15), 16);
    }
    var _default = version;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/index.js
var require_commonjs_browser = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function get() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _parse.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function get() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function get() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function get() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function get() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function get() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function get() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function get() {
        return _version.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@cerbos/core/lib/convert/toProtobuf.js
var require_toProtobuf = __commonJS({
  "node_modules/@cerbos/core/lib/convert/toProtobuf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.planResourcesRequestToProtobuf = exports.listPoliciesRequestToProtobuf = exports.getSchemasRequestToProtobuf = exports.getPoliciesRequestToProtobuf = exports.enablePoliciesRequestToProtobuf = exports.disablePoliciesRequestToProtobuf = exports.deleteSchemasRequestToProtobuf = exports.checkResourcesRequestToProtobuf = exports.addOrUpdateSchemasRequestToProtobuf = exports.addOrUpdatePoliciesRequestToProtobuf = void 0;
    var uuid_1 = require_commonjs_browser();
    var effect_1 = require_effect();
    var external_1 = require_external();
    var encoder = new TextEncoder();
    function addOrUpdatePoliciesRequestToProtobuf({ policies }) {
      return {
        policies: policies.map(policyToProtobuf)
      };
    }
    exports.addOrUpdatePoliciesRequestToProtobuf = addOrUpdatePoliciesRequestToProtobuf;
    function policyToProtobuf(policy) {
      const { apiVersion = "api.cerbos.dev/v1", description = "", disabled = false, variables = {} } = policy;
      return {
        apiVersion,
        description,
        disabled,
        jsonSchema: "",
        metadata: void 0,
        policyType: policyTypeToProtobuf(policy),
        variables
      };
    }
    function policyTypeToProtobuf(policy) {
      if ((0, external_1.policyIsDerivedRoles)(policy)) {
        return {
          $case: "derivedRoles",
          derivedRoles: derivedRolesToProtobuf(policy)
        };
      }
      if ((0, external_1.policyIsExportVariables)(policy)) {
        return {
          $case: "exportVariables",
          exportVariables: exportVariablesToProtobuf(policy)
        };
      }
      if ((0, external_1.policyIsPrincipalPolicy)(policy)) {
        return {
          $case: "principalPolicy",
          principalPolicy: principalPolicyToProtobuf(policy)
        };
      }
      if ((0, external_1.policyIsResourcePolicy)(policy)) {
        return {
          $case: "resourcePolicy",
          resourcePolicy: resourcePolicyToProtobuf(policy)
        };
      }
      throw new Error(`Unknown policy type: ${JSON.stringify(policy, null, 2)}`);
    }
    function derivedRolesToProtobuf({ derivedRoles: { name, definitions, variables } }) {
      return {
        name,
        definitions: definitions.map(derivedRoleDefinitionToProtobuf),
        variables: variables && variablesToProtobuf(variables)
      };
    }
    function derivedRoleDefinitionToProtobuf({ name, parentRoles, condition }) {
      return {
        name,
        parentRoles,
        condition: condition && conditionToProtobuf(condition)
      };
    }
    function conditionToProtobuf({ match }) {
      return {
        condition: {
          $case: "match",
          match: matchToProtobuf(match)
        }
      };
    }
    function matchToProtobuf(match) {
      if ((0, external_1.matchIsMatchAll)(match)) {
        return {
          op: {
            $case: "all",
            all: matchesToProtobuf(match.all)
          }
        };
      }
      if ((0, external_1.matchIsMatchAny)(match)) {
        return {
          op: {
            $case: "any",
            any: matchesToProtobuf(match.any)
          }
        };
      }
      if ((0, external_1.matchIsMatchNone)(match)) {
        return {
          op: {
            $case: "none",
            none: matchesToProtobuf(match.none)
          }
        };
      }
      if ((0, external_1.matchIsMatchExpr)(match)) {
        return {
          op: {
            $case: "expr",
            expr: match.expr
          }
        };
      }
      throw new Error(`Unknown match type: ${JSON.stringify(match, null, 2)}`);
    }
    function matchesToProtobuf({ of }) {
      return {
        of: of.map(matchToProtobuf)
      };
    }
    function variablesToProtobuf({ import: imports = [], local = {} }) {
      return {
        import: imports,
        local
      };
    }
    function exportVariablesToProtobuf({ exportVariables: { name, definitions } }) {
      return {
        name,
        definitions
      };
    }
    function principalPolicyToProtobuf({ principalPolicy: { principal, version, rules, scope = "", variables } }) {
      return {
        principal,
        version,
        rules: rules.map(principalRuleToProtobuf),
        scope,
        variables: variables && variablesToProtobuf(variables)
      };
    }
    function principalRuleToProtobuf({ resource, actions }) {
      return {
        resource,
        actions: actions.map(principalRuleActionToProtobuf)
      };
    }
    function principalRuleActionToProtobuf({ action, effect, condition, name = "", output }) {
      return {
        action,
        effect: effectToProtobuf(effect),
        condition: condition && conditionToProtobuf(condition),
        name,
        output: output && outputToProtobuf(output)
      };
    }
    function effectToProtobuf(effect) {
      return effect === external_1.Effect.ALLOW ? effect_1.Effect.EFFECT_ALLOW : effect_1.Effect.EFFECT_DENY;
    }
    function outputToProtobuf({ expr = "", when }) {
      return {
        expr,
        when: when && outputExpressionsToProtobuf(when)
      };
    }
    function outputExpressionsToProtobuf({ ruleActivated = "", conditionNotMet = "" }) {
      return {
        ruleActivated,
        conditionNotMet
      };
    }
    function resourcePolicyToProtobuf({ resourcePolicy: { resource, version, importDerivedRoles = [], rules, scope = "", schemas, variables } }) {
      return {
        resource,
        version,
        importDerivedRoles,
        rules: rules.map(resourceRuleToProtobuf),
        scope,
        schemas: schemas && policySchemasToProtobuf(schemas),
        variables: variables && variablesToProtobuf(variables)
      };
    }
    function resourceRuleToProtobuf({ actions, effect, derivedRoles = [], roles = [], condition, name = "", output }) {
      return {
        actions,
        effect: effectToProtobuf(effect),
        derivedRoles,
        roles,
        condition: condition && conditionToProtobuf(condition),
        name,
        output: output && outputToProtobuf(output)
      };
    }
    function policySchemasToProtobuf({ principalSchema, resourceSchema }) {
      return {
        principalSchema: principalSchema && policySchemaToProtobuf(principalSchema),
        resourceSchema: resourceSchema && policySchemaToProtobuf(resourceSchema)
      };
    }
    function policySchemaToProtobuf({ ref, ignoreWhen }) {
      return {
        ref,
        ignoreWhen
      };
    }
    function addOrUpdateSchemasRequestToProtobuf({ schemas }) {
      return {
        schemas: schemas.map(schemaToProtobuf)
      };
    }
    exports.addOrUpdateSchemasRequestToProtobuf = addOrUpdateSchemasRequestToProtobuf;
    function schemaToProtobuf({ id, definition }) {
      return {
        id,
        definition: schemaDefinitionToProtobuf(definition)
      };
    }
    function schemaDefinitionToProtobuf(definition) {
      if (definition instanceof Uint8Array) {
        return definition;
      }
      if (definition instanceof external_1.SchemaDefinition) {
        return definition.bytes;
      }
      if (typeof definition === "string") {
        return encoder.encode(definition);
      }
      return encoder.encode(JSON.stringify(definition));
    }
    function checkResourcesRequestToProtobuf({ principal, resources, auxData, includeMetadata = false, requestId = (0, uuid_1.v4)() }) {
      return {
        principal: principalToProtobuf(principal),
        resources: resources.map(resourceCheckToProtobuf),
        auxData: auxData && auxDataToProtobuf(auxData),
        includeMeta: includeMetadata,
        requestId
      };
    }
    exports.checkResourcesRequestToProtobuf = checkResourcesRequestToProtobuf;
    function principalToProtobuf({ id, roles, attr = {}, attributes = {}, policyVersion = "", scope = "" }) {
      return {
        id,
        roles,
        attr: {
          ...attributes,
          ...attr
        },
        policyVersion,
        scope
      };
    }
    function resourceCheckToProtobuf({ resource, actions }) {
      return {
        resource: resourceToProtobuf(resource),
        actions
      };
    }
    function resourceToProtobuf({ kind, id, attr = {}, attributes = {}, policyVersion = "", scope = "" }) {
      return {
        kind,
        id,
        attr: {
          ...attributes,
          ...attr
        },
        policyVersion,
        scope
      };
    }
    function auxDataToProtobuf({ jwt }) {
      if (!jwt) {
        return void 0;
      }
      return {
        jwt: jwtToProtobuf(jwt)
      };
    }
    function jwtToProtobuf({ token, keySetId = "" }) {
      return {
        token,
        keySetId
      };
    }
    function deleteSchemasRequestToProtobuf({ ids }) {
      return {
        id: ids
      };
    }
    exports.deleteSchemasRequestToProtobuf = deleteSchemasRequestToProtobuf;
    function disablePoliciesRequestToProtobuf({ ids }) {
      return {
        id: ids
      };
    }
    exports.disablePoliciesRequestToProtobuf = disablePoliciesRequestToProtobuf;
    function enablePoliciesRequestToProtobuf({ ids }) {
      return {
        id: ids
      };
    }
    exports.enablePoliciesRequestToProtobuf = enablePoliciesRequestToProtobuf;
    function getPoliciesRequestToProtobuf({ ids }) {
      return {
        id: ids
      };
    }
    exports.getPoliciesRequestToProtobuf = getPoliciesRequestToProtobuf;
    function getSchemasRequestToProtobuf({ ids }) {
      return {
        id: ids
      };
    }
    exports.getSchemasRequestToProtobuf = getSchemasRequestToProtobuf;
    function listPoliciesRequestToProtobuf({ includeDisabled = false, nameRegexp = "", scopeRegexp = "", versionRegexp = "" }) {
      return {
        includeDisabled,
        nameRegexp,
        scopeRegexp,
        versionRegexp
      };
    }
    exports.listPoliciesRequestToProtobuf = listPoliciesRequestToProtobuf;
    function planResourcesRequestToProtobuf({ principal, resource, action, auxData, includeMetadata = false, requestId = (0, uuid_1.v4)() }) {
      return {
        principal: principalToProtobuf(principal),
        resource: resourceQueryToProtobuf(resource),
        action,
        auxData: auxData && auxDataToProtobuf(auxData),
        includeMeta: includeMetadata,
        requestId
      };
    }
    exports.planResourcesRequestToProtobuf = planResourcesRequestToProtobuf;
    function resourceQueryToProtobuf({ kind, attr = {}, attributes = {}, policyVersion = "", scope = "" }) {
      return {
        kind,
        attr: {
          ...attributes,
          ...attr
        },
        policyVersion,
        scope
      };
    }
  }
});

// node_modules/@cerbos/core/lib/errors.js
var require_errors = __commonJS({
  "node_modules/@cerbos/core/lib/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._setErrorNameAndStack = exports.ValidationFailed = exports.NotOK = exports.Status = void 0;
    var Status;
    (function(Status2) {
      Status2[Status2["CANCELLED"] = 1] = "CANCELLED";
      Status2[Status2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
      Status2[Status2["INTERNAL"] = 13] = "INTERNAL";
      Status2[Status2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
      Status2[Status2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
      Status2[Status2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
      Status2[Status2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
      Status2[Status2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
      Status2[Status2["UNKNOWN"] = 2] = "UNKNOWN";
    })(Status || (exports.Status = Status = {}));
    var NotOK = class _NotOK extends Error {
      constructor(code2, details2, options) {
        super(`gRPC error ${code2} (${Status[code2]}): ${details2}`, options);
        __publicField(this, "code");
        __publicField(this, "details");
        this.code = code2;
        this.details = details2;
        _setErrorNameAndStack(this);
      }
      /**
       * Parse a JSON-serialized unsuccessful response.
       */
      static fromJSON(text) {
        try {
          const error = JSON.parse(text);
          return new _NotOK(code(error), details(error));
        } catch (_) {
          return new _NotOK(Status.UNKNOWN, text);
        }
      }
    };
    exports.NotOK = NotOK;
    function code(error) {
      if (has(error, "code") && typeof error.code === "number" && error.code in Status) {
        return error.code || Status.UNKNOWN;
      }
      throw new Error("Error does not include expected code");
    }
    function details(error) {
      if (has(error, "message") && typeof error.message === "string") {
        return error.message;
      }
      throw new Error("Error does not include expected details");
    }
    function has(object, property) {
      return !!object && Object.prototype.hasOwnProperty.call(object, property);
    }
    var ValidationFailed = class extends Error {
      constructor(validationErrors) {
        super("Input failed schema validation");
        __publicField(this, "validationErrors");
        this.validationErrors = validationErrors;
        _setErrorNameAndStack(this);
      }
    };
    exports.ValidationFailed = ValidationFailed;
    function _setErrorNameAndStack(error) {
      error.name = error.constructor.name;
      if ("captureStackTrace" in Error) {
        Error.captureStackTrace(error, error.constructor);
      }
    }
    exports._setErrorNameAndStack = _setErrorNameAndStack;
  }
});

// node_modules/@cerbos/core/lib/client.js
var require_client = __commonJS({
  "node_modules/@cerbos/core/lib/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientWithPrincipal = exports.Client = exports._removeInstrumenter = exports._addInstrumenter = exports._AbortHandler = void 0;
    var fromProtobuf_1 = require_fromProtobuf();
    var toProtobuf_1 = require_toProtobuf();
    var errors_1 = require_errors();
    var _AbortHandler = class {
      constructor(signal) {
        __publicField(this, "signal");
        this.signal = signal;
      }
      throwIfAborted() {
        var _a;
        if ((_a = this.signal) == null ? void 0 : _a.aborted) {
          throw this.error();
        }
      }
      onAbort(listener) {
        var _a;
        (_a = this.signal) == null ? void 0 : _a.addEventListener("abort", () => {
          listener(this.error());
        });
      }
      error() {
        var _a;
        const reason = (_a = this.signal) == null ? void 0 : _a.reason;
        return new errors_1.NotOK(errors_1.Status.CANCELLED, reason instanceof Error ? `Aborted: ${reason.message}` : "Aborted", { cause: reason });
      }
    };
    exports._AbortHandler = _AbortHandler;
    var instrumenters = /* @__PURE__ */ new Set();
    function _addInstrumenter(instrumenter) {
      instrumenters.add(instrumenter);
    }
    exports._addInstrumenter = _addInstrumenter;
    function _removeInstrumenter(instrumenter) {
      instrumenters.delete(instrumenter);
    }
    exports._removeInstrumenter = _removeInstrumenter;
    var Client = class {
      /** @internal */
      constructor(transport, options) {
        __publicField(this, "transport");
        __publicField(this, "options");
        this.transport = transport;
        this.options = options;
        for (const instrumenter of instrumenters) {
          this.transport = instrumenter(this.transport);
        }
      }
      /**
       * Add policies, or update existing policies.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled, and
       *
       * - a dynamic {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * @example
       * Create a policy in code:
       *
       * ```typescript
       * await cerbos.addOrUpdatePolicies({
       *   policies: [{
       *     resourcePolicy: {
       *       resource: "document",
       *       version: "1",
       *       rules: [{
       *         actions: ["*"],
       *         effect: Effect.ALLOW,
       *         roles: ["ADMIN"],
       *       }],
       *     },
       *   }],
       * });
       * ```
       *
       * @example
       * Load a policy from a YAML or JSON file with {@link @cerbos/files#readPolicy}:
       *
       * ```typescript
       * import { readPolicy } from "@cerbos/files";
       *
       * await cerbos.addOrUpdatePolicies({
       *   policies: [await readPolicy("path/to/policy.yaml")],
       * });
       * ```
       *
       * @example
       * Load policies and schemas from a directory with {@link @cerbos/files#readDirectory}:
       *
       * ```typescript
       * import { readDirectory } from "@cerbos/files";
       *
       * const { policies, schemas } = await readDirectory("path/to/directory");
       *
       * await cerbos.addOrUpdateSchemas({ schemas });
       * await cerbos.addOrUpdatePolicies({ policies });
       * ```
       */
      async addOrUpdatePolicies(request, options) {
        await this.admin("addOrUpdatePolicy", (0, toProtobuf_1.addOrUpdatePoliciesRequestToProtobuf)(request), options);
      }
      /**
       * Add schemas to be used for validating principal or resource attributes, or update existing schemas.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled, and
       *
       * - a dynamic {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * @example
       * Create a schema in code:
       *
       * ```typescript
       *
       * await cerbos.addOrUpdateSchemas({
       *   schemas: [{
       *     id: "document.json",
       *     definition: {
       *       type: "object",
       *       properties: {
       *         owner: { type: "string" }
       *       }
       *     },
       *   }],
       * });
       * ```
       *
       * @example
       * Load a schema from a JSON file with {@link @cerbos/files#readSchema}:
       *
       * ```typescript
       * import { readSchema } from "@cerbos/files";
       *
       * await cerbos.addOrUpdateSchemas({
       *   schemas: [await readSchema("_schemas/path/to/schema.json")],
       * });
       * ```
       *
       * @example
       * Load policies and schemas from a directory with {@link @cerbos/files#readDirectory}:
       *
       * ```typescript
       * import { readDirectory } from "@cerbos/files";
       *
       * const { policies, schemas } = await readDirectory("path/to/directory");
       *
       * await cerbos.addOrUpdateSchemas({ schemas });
       * await cerbos.addOrUpdatePolicies({ policies });
       * ```
       */
      async addOrUpdateSchemas(request, options) {
        await this.admin("addOrUpdateSchema", (0, toProtobuf_1.addOrUpdateSchemasRequestToProtobuf)(request), options);
      }
      /**
       * Check a principal's permissions on a resource.
       *
       * @example
       * ```typescript
       * const decision = await cerbos.checkResource({
       *   principal: {
       *     id: "user@example.com",
       *     roles: ["USER"],
       *     attr: { tier: "PREMIUM" },
       *   },
       *   resource: {
       *     kind: "document",
       *     id: "1",
       *     attr: { owner: "user@example.com" },
       *   },
       *   actions: ["view", "edit"],
       * });
       *
       * decision.isAllowed("view"); // => true
       * ```
       */
      async checkResource(request, options) {
        const { resource, actions, ...rest } = request;
        const response = await this.checkResources({ resources: [{ resource, actions }], ...rest }, options);
        const result = response.findResult(resource);
        if (!result) {
          throw new Error("No decision returned for resource");
        }
        return result;
      }
      /**
       * Check a principal's permissions on a set of resources.
       *
       * @example
       * ```typescript
       * const decision = await cerbos.checkResources({
       *   principal: {
       *     id: "user@example.com",
       *     roles: ["USER"],
       *     attr: { tier: "PREMIUM" },
       *   },
       *   resources: [
       *     {
       *       resource: {
       *         kind: "document",
       *         id: "1",
       *         attr: { owner: "user@example.com" },
       *       },
       *       actions: ["view", "edit"],
       *     },
       *     {
       *       resource: {
       *         kind: "image",
       *         id: "1",
       *         attr: { owner: "user@example.com" },
       *       },
       *       actions: ["delete"],
       *     },
       *   ],
       * });
       *
       * decision.isAllowed({
       *   resource: { kind: "document", id: "1" },
       *   action: "view",
       * }); // => true
       * ```
       */
      async checkResources(request, options) {
        const response = (0, fromProtobuf_1.checkResourcesResponseFromProtobuf)(await this.cerbos("checkResources", (0, toProtobuf_1.checkResourcesRequestToProtobuf)(request), options));
        this.handleValidationErrors(response);
        return response;
      }
      /**
       * Delete a schema.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point (PDP) server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled, and
       *
       * - a dynamic {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * The way this method handles failure depends on the version of the connected PDP server.
       * When the server is running Cerbos v0.25 or later, it returns `true` if the schema was deleted and `false` if the schema was not found.
       * With earlier versions of Cerbos, it throws an error if the schema was not found, and returns successfully if the schema was deleted; the returned value should be ignored.
       *
       * @example
       * ```typescript
       * const deleted = await cerbos.deleteSchema("document.json");
       * ```
       */
      async deleteSchema(id, options) {
        const { deletedSchemas } = await this.deleteSchemas({ ids: [id] }, options);
        return deletedSchemas === 1;
      }
      /**
       * Delete multiple schemas.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point (PDP) server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled, and
       *
       * - a dynamic {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * The way this method handles failure depends on the version of the connected PDP server.
       * When the server is running Cerbos v0.25 or later, it returns a {@link DeleteSchemasResponse} that includes the number of schemas that were deleted.
       * With earlier versions of Cerbos, it throws an error if no schemas were found, and returns successfully if at least one schema was deleted; the returned value should be ignored.
       *
       * @example
       * ```typescript
       * const result = await cerbos.deleteSchemas({
       *   ids: ["document.json", "image.json"],
       * });
       * ```
       */
      async deleteSchemas(request, options) {
        return (0, fromProtobuf_1.deleteSchemasResponseFromProtobuf)(await this.admin("deleteSchema", (0, toProtobuf_1.deleteSchemasRequestToProtobuf)(request), options));
      }
      /**
       * Disable multiple policies.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point server to be at least v0.25 and configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled, and
       *
       * - a dynamic {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * @example
       * ```typescript
       * const result = await cerbos.disablePolicies({
       *   ids: ["resource.document.v1", "resource.image.v1"],
       * });
       * ```
       */
      async disablePolicies(request, options) {
        return (0, fromProtobuf_1.disablePoliciesResponseFromProtobuf)(await this.admin("disablePolicy", (0, toProtobuf_1.disablePoliciesRequestToProtobuf)(request), options));
      }
      /**
       * Disable a policy.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point server to be at least v0.25 and configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled, and
       *
       * - a dynamic {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * @example
       * ```typescript
       * const disabled = await cerbos.disablePolicy("resource.document.v1");
       * ```
       */
      async disablePolicy(id, options) {
        const { disabledPolicies } = await this.disablePolicies({ ids: [id] }, options);
        return disabledPolicies === 1;
      }
      /**
       * Enable multiple policies.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point server to be at least v0.26 and configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled, and
       *
       * - a dynamic {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * @example
       * ```typescript
       * const result = await cerbos.enablePolicies({
       *   ids: ["resource.document.v1", "resource.image.v1"],
       * });
       * ```
       */
      async enablePolicies(request, options) {
        return (0, fromProtobuf_1.enablePoliciesResponseFromProtobuf)(await this.admin("enablePolicy", (0, toProtobuf_1.enablePoliciesRequestToProtobuf)(request), options));
      }
      /**
       * Enable a policy.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point server to be at least v0.26 and configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled, and
       *
       * - a dynamic {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * @example
       * ```typescript
       * const enabled = await cerbos.enablePolicy("resource.document.v1");
       * ```
       */
      async enablePolicy(id, options) {
        const { enabledPolicies } = await this.enablePolicies({ ids: [id] }, options);
        return enabledPolicies === 1;
      }
      /**
       * Fetch multiple policies by ID.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials}, and
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled.
       *
       * @example
       * ```typescript
       * const policies = await cerbos.getPolicies({
       *   ids: ["resource.document.v1", "resource.image.v1"],
       * });
       * ```
       */
      async getPolicies(request, options) {
        return (0, fromProtobuf_1.getPoliciesResponseFromProtobuf)(await this.admin("getPolicy", (0, toProtobuf_1.getPoliciesRequestToProtobuf)(request), options));
      }
      /**
       * Fetch a policy by ID.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials}, and
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled.
       *
       * @example
       * ```typescript
       * const policy = await cerbos.getPolicy("resource.document.v1");
       * ```
       */
      async getPolicy(id, options) {
        const { policies: [policy] } = await this.getPolicies({ ids: [id] }, options);
        return policy;
      }
      /**
       * Fetch a schema by ID.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials}, and
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled.
       *
       * @example
       * ```typescript
       * const schema = await cerbos.getSchema("document.json");
       * ```
       */
      async getSchema(id, options) {
        const { schemas: [schema] } = await this.getSchemas({ ids: [id] }, options);
        return schema;
      }
      /**
       * Fetch multiple schemas by ID.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials}, and
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled.
       *
       * @example
       * ```typescript
       * const schemas = await cerbos.getSchemas({
       *   ids: ["document.json", "image.json"],
       * });
       * ```
       */
      async getSchemas(request, options) {
        return (0, fromProtobuf_1.getSchemasResponseFromProtobuf)(await this.admin("getSchema", (0, toProtobuf_1.getSchemasRequestToProtobuf)(request), options));
      }
      /**
       * Check if a principal is allowed to perform an action on a resource.
       *
       * @example
       * ```typescript
       * await cerbos.isAllowed({
       *   principal: {
       *     id: "user@example.com",
       *     roles: ["USER"],
       *     attr: { tier: "PREMIUM" },
       *   },
       *   resource: {
       *     kind: "document",
       *     id: "1",
       *     attr: { owner: "user@example.com" },
       *   },
       *   action: "view",
       * }); // => true
       * ```
       */
      async isAllowed(request, options) {
        const { action, ...rest } = request;
        const result = await this.checkResource({ actions: [action], ...rest }, options);
        const allowed = result.isAllowed(action);
        if (allowed === void 0) {
          throw new Error("No decision returned for action");
        }
        return allowed;
      }
      /**
       * List policies.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials}, and
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled.
       *
       * @example
       * ```typescript
       * const { ids } = await cerbos.listPolicies();
       * ```
       */
      async listPolicies(request = {}, options) {
        return (0, fromProtobuf_1.listPoliciesResponseFromProtobuf)(await this.admin("listPolicies", (0, toProtobuf_1.listPoliciesRequestToProtobuf)(request), options));
      }
      /**
       * List schemas.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials}, and
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API} enabled.
       *
       * @example
       * ```typescript
       * const { ids } = await cerbos.listSchemas();
       * ```
       */
      async listSchemas(options) {
        return (0, fromProtobuf_1.listSchemasResponseFromProtobuf)(await this.admin("listSchemas", {}, options));
      }
      /**
       * Produce a query plan that can be used to obtain a list of resources on which a principal is allowed to perform a particular action.
       *
       * @example
       * ```typescript
       * const plan = await cerbos.planResources({
       *   principal: {
       *     id: "user@example.com",
       *     roles: ["USER"],
       *     attr: { tier: "PREMIUM" },
       *   },
       *   resource: { kind: "document" },
       *   action: "view",
       * });
       * ```
       */
      async planResources(request, options) {
        const response = (0, fromProtobuf_1.planResourcesResponseFromProtobuf)(await this.cerbos("planResources", (0, toProtobuf_1.planResourcesRequestToProtobuf)(request), options));
        this.handleValidationErrors(response);
        return response;
      }
      /**
       * Reload the store.
       *
       * @remarks
       * Requires
       *
       * - the client to be configured with {@link Options.adminCredentials},
       *
       * - the Cerbos policy decision point server to be configured with the {@link https://docs.cerbos.dev/cerbos/latest/api/admin_api | admin API}, and
       *
       * - a reloadable {@link https://docs.cerbos.dev/cerbos/latest/configuration/storage | storage backend}.
       *
       * @example
       * ```typescript
       * await cerbos.reloadStore({ wait: true });
       * ```
       */
      async reloadStore(request, options) {
        await this.admin("reloadStore", request, options);
      }
      /**
       * Retrieve information about the Cerbos policy decision point server.
       */
      async serverInfo(options) {
        return await this.cerbos("serverInfo", {}, options);
      }
      /**
       * Create a client instance with a pre-specified principal.
       */
      withPrincipal(principal, auxData = {}) {
        return new ClientWithPrincipal(this, principal, auxData);
      }
      async admin(rpc, request, options) {
        return await this.send("admin", rpc, request, this.options.adminCredentials, options);
      }
      async cerbos(rpc, request, options) {
        return await this.send("cerbos", rpc, request, void 0, options);
      }
      async send(service, rpc, request, adminCredentials, { headers, signal } = {}) {
        return await this.transport(service, rpc, request, await this.mergeHeaders(headers, adminCredentials), new _AbortHandler(signal));
      }
      async mergeHeaders(override, adminCredentials) {
        const init = this.options.headers;
        const headers = new Headers(typeof init === "function" ? await init() : init);
        if (adminCredentials) {
          headers.set("Authorization", `Basic ${btoa(`${adminCredentials.username}:${adminCredentials.password}`)}`);
        }
        if (this.options.playgroundInstance) {
          headers.set("Playground-Instance", this.options.playgroundInstance);
        }
        if (override) {
          for (const [name, value] of new Headers(override)) {
            headers.set(name, value);
          }
        }
        return headers;
      }
      handleValidationErrors({ validationErrors }) {
        const { onValidationError } = this.options;
        if (onValidationError) {
          if (validationErrors.length > 0) {
            if (onValidationError === "throw") {
              throw new errors_1.ValidationFailed(validationErrors);
            }
            onValidationError(validationErrors);
          }
        }
      }
    };
    exports.Client = Client;
    var ClientWithPrincipal = class {
      /** @internal */
      constructor(client, principal, auxData = {}) {
        __publicField(this, "client");
        __publicField(this, "principal");
        __publicField(this, "auxData");
        this.client = client;
        this.principal = principal;
        this.auxData = auxData;
      }
      /**
       * Check the principal's permissions on a resource.
       * See {@link Client.checkResource} for details.
       */
      async checkResource(request, options) {
        return await this.client.checkResource(this.merge(request), options);
      }
      /**
       * Check the principal's permissions on a set of resources.
       * See {@link Client.checkResources} for details.
       */
      async checkResources(request, options) {
        return await this.client.checkResources(this.merge(request), options);
      }
      /**
       * Check if the principal is allowed to perform an action on a resource.
       * See {@link Client.isAllowed} for details.
       */
      async isAllowed(request, options) {
        return await this.client.isAllowed(this.merge(request), options);
      }
      /**
       * Produce a query plan that can be used to obtain a list of resources on which the principal is allowed to perform a particular action.
       * See {@link Client.planResources} for details.
       */
      async planResources(request, options) {
        return await this.client.planResources(this.merge(request), options);
      }
      merge({ auxData = {}, ...rest }) {
        return {
          principal: this.principal,
          auxData: {
            ...this.auxData,
            ...auxData
          },
          ...rest
        };
      }
    };
    exports.ClientWithPrincipal = ClientWithPrincipal;
  }
});

// node_modules/@cerbos/core/lib/rpcs.js
var require_rpcs = __commonJS({
  "node_modules/@cerbos/core/lib/rpcs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@cerbos/core/lib/index.js
var require_lib = __commonJS({
  "node_modules/@cerbos/core/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._policyFromProtobuf = void 0;
    __exportStar(require_client(), exports);
    var fromProtobuf_1 = require_fromProtobuf();
    Object.defineProperty(exports, "_policyFromProtobuf", { enumerable: true, get: function() {
      return fromProtobuf_1._policyFromProtobuf;
    } });
    __exportStar(require_errors(), exports);
    __exportStar(require_rpcs(), exports);
    __exportStar(require_external(), exports);
  }
});

// node_modules/@cerbos/embedded/lib/protobuf/cerbos/engine/v1/engine.js
var require_engine2 = __commonJS({
  "node_modules/@cerbos/embedded/lib/protobuf/cerbos/engine/v1/engine.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Principal_AttrEntry = exports.Principal = exports.Resource_AttrEntry = exports.Resource = exports.OutputEntry = exports.PlanResourcesFilter_Expression_Operand = exports.PlanResourcesFilter_Expression = exports.PlanResourcesFilter = exports.PlanResourcesInput_Resource_AttrEntry = exports.PlanResourcesInput_Resource = exports.PlanResourcesInput = exports.planResourcesFilter_KindToJSON = exports.planResourcesFilter_KindFromJSON = exports.PlanResourcesFilter_Kind = exports.protobufPackage = void 0;
    exports.protobufPackage = "cerbos.engine.v1";
    var PlanResourcesFilter_Kind;
    (function(PlanResourcesFilter_Kind2) {
      PlanResourcesFilter_Kind2[PlanResourcesFilter_Kind2["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
      PlanResourcesFilter_Kind2[PlanResourcesFilter_Kind2["KIND_ALWAYS_ALLOWED"] = 1] = "KIND_ALWAYS_ALLOWED";
      PlanResourcesFilter_Kind2[PlanResourcesFilter_Kind2["KIND_ALWAYS_DENIED"] = 2] = "KIND_ALWAYS_DENIED";
      PlanResourcesFilter_Kind2[PlanResourcesFilter_Kind2["KIND_CONDITIONAL"] = 3] = "KIND_CONDITIONAL";
    })(PlanResourcesFilter_Kind || (exports.PlanResourcesFilter_Kind = PlanResourcesFilter_Kind = {}));
    function planResourcesFilter_KindFromJSON(object) {
      switch (object) {
        case 0:
        case "KIND_UNSPECIFIED":
          return PlanResourcesFilter_Kind.KIND_UNSPECIFIED;
        case 1:
        case "KIND_ALWAYS_ALLOWED":
          return PlanResourcesFilter_Kind.KIND_ALWAYS_ALLOWED;
        case 2:
        case "KIND_ALWAYS_DENIED":
          return PlanResourcesFilter_Kind.KIND_ALWAYS_DENIED;
        case 3:
        case "KIND_CONDITIONAL":
          return PlanResourcesFilter_Kind.KIND_CONDITIONAL;
        default:
          throw new globalThis.Error("Unrecognized enum value " + object + " for enum PlanResourcesFilter_Kind");
      }
    }
    exports.planResourcesFilter_KindFromJSON = planResourcesFilter_KindFromJSON;
    function planResourcesFilter_KindToJSON(object) {
      switch (object) {
        case PlanResourcesFilter_Kind.KIND_UNSPECIFIED:
          return "KIND_UNSPECIFIED";
        case PlanResourcesFilter_Kind.KIND_ALWAYS_ALLOWED:
          return "KIND_ALWAYS_ALLOWED";
        case PlanResourcesFilter_Kind.KIND_ALWAYS_DENIED:
          return "KIND_ALWAYS_DENIED";
        case PlanResourcesFilter_Kind.KIND_CONDITIONAL:
          return "KIND_CONDITIONAL";
        default:
          throw new globalThis.Error("Unrecognized enum value " + object + " for enum PlanResourcesFilter_Kind");
      }
    }
    exports.planResourcesFilter_KindToJSON = planResourcesFilter_KindToJSON;
    exports.PlanResourcesInput = {
      fromJSON(_) {
        return {};
      },
      toJSON(_) {
        const obj = {};
        return obj;
      }
    };
    exports.PlanResourcesInput_Resource = {
      fromJSON(object) {
        return {
          kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
          attr: isObject(object.attr) ? Object.entries(object.attr).reduce((acc, [key, value]) => {
            acc[key] = value;
            return acc;
          }, {}) : {},
          policyVersion: isSet(object.policyVersion) ? globalThis.String(object.policyVersion) : "",
          scope: isSet(object.scope) ? globalThis.String(object.scope) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.kind !== "") {
          obj.kind = message.kind;
        }
        if (message.attr) {
          const entries = Object.entries(message.attr);
          if (entries.length > 0) {
            obj.attr = {};
            entries.forEach(([k, v]) => {
              obj.attr[k] = v;
            });
          }
        }
        if (message.policyVersion !== "") {
          obj.policyVersion = message.policyVersion;
        }
        if (message.scope !== "") {
          obj.scope = message.scope;
        }
        return obj;
      }
    };
    exports.PlanResourcesInput_Resource_AttrEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object == null ? void 0 : object.value) ? object.value : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = message.value;
        }
        return obj;
      }
    };
    exports.PlanResourcesFilter = {
      fromJSON(object) {
        return {
          kind: isSet(object.kind) ? planResourcesFilter_KindFromJSON(object.kind) : 0,
          condition: isSet(object.condition) ? exports.PlanResourcesFilter_Expression_Operand.fromJSON(object.condition) : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.kind !== 0) {
          obj.kind = planResourcesFilter_KindToJSON(message.kind);
        }
        if (message.condition !== void 0) {
          obj.condition = exports.PlanResourcesFilter_Expression_Operand.toJSON(message.condition);
        }
        return obj;
      }
    };
    exports.PlanResourcesFilter_Expression = {
      fromJSON(object) {
        return {
          operator: isSet(object.operator) ? globalThis.String(object.operator) : "",
          operands: globalThis.Array.isArray(object == null ? void 0 : object.operands) ? object.operands.map((e) => exports.PlanResourcesFilter_Expression_Operand.fromJSON(e)) : []
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.operator !== "") {
          obj.operator = message.operator;
        }
        if ((_a = message.operands) == null ? void 0 : _a.length) {
          obj.operands = message.operands.map((e) => exports.PlanResourcesFilter_Expression_Operand.toJSON(e));
        }
        return obj;
      }
    };
    exports.PlanResourcesFilter_Expression_Operand = {
      fromJSON(object) {
        return {
          node: isSet(object.value) ? { $case: "value", value: object.value } : isSet(object.expression) ? {
            $case: "expression",
            expression: exports.PlanResourcesFilter_Expression.fromJSON(object.expression)
          } : isSet(object.variable) ? {
            $case: "variable",
            variable: globalThis.String(object.variable)
          } : void 0
        };
      },
      toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (((_a = message.node) == null ? void 0 : _a.$case) === "value") {
          obj.value = message.node.value;
        }
        if (((_b = message.node) == null ? void 0 : _b.$case) === "expression") {
          obj.expression = exports.PlanResourcesFilter_Expression.toJSON(message.node.expression);
        }
        if (((_c = message.node) == null ? void 0 : _c.$case) === "variable") {
          obj.variable = message.node.variable;
        }
        return obj;
      }
    };
    exports.OutputEntry = {
      fromJSON(object) {
        return {
          src: isSet(object.src) ? globalThis.String(object.src) : "",
          val: isSet(object == null ? void 0 : object.val) ? object.val : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.src !== "") {
          obj.src = message.src;
        }
        if (message.val !== void 0) {
          obj.val = message.val;
        }
        return obj;
      }
    };
    exports.Resource = {
      fromJSON(object) {
        return {
          kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
          policyVersion: isSet(object.policyVersion) ? globalThis.String(object.policyVersion) : "",
          id: isSet(object.id) ? globalThis.String(object.id) : "",
          attr: isObject(object.attr) ? Object.entries(object.attr).reduce((acc, [key, value]) => {
            acc[key] = value;
            return acc;
          }, {}) : {},
          scope: isSet(object.scope) ? globalThis.String(object.scope) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.kind !== "") {
          obj.kind = message.kind;
        }
        if (message.policyVersion !== "") {
          obj.policyVersion = message.policyVersion;
        }
        if (message.id !== "") {
          obj.id = message.id;
        }
        if (message.attr) {
          const entries = Object.entries(message.attr);
          if (entries.length > 0) {
            obj.attr = {};
            entries.forEach(([k, v]) => {
              obj.attr[k] = v;
            });
          }
        }
        if (message.scope !== "") {
          obj.scope = message.scope;
        }
        return obj;
      }
    };
    exports.Resource_AttrEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object == null ? void 0 : object.value) ? object.value : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = message.value;
        }
        return obj;
      }
    };
    exports.Principal = {
      fromJSON(object) {
        return {
          id: isSet(object.id) ? globalThis.String(object.id) : "",
          policyVersion: isSet(object.policyVersion) ? globalThis.String(object.policyVersion) : "",
          roles: globalThis.Array.isArray(object == null ? void 0 : object.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
          attr: isObject(object.attr) ? Object.entries(object.attr).reduce((acc, [key, value]) => {
            acc[key] = value;
            return acc;
          }, {}) : {},
          scope: isSet(object.scope) ? globalThis.String(object.scope) : ""
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
          obj.id = message.id;
        }
        if (message.policyVersion !== "") {
          obj.policyVersion = message.policyVersion;
        }
        if ((_a = message.roles) == null ? void 0 : _a.length) {
          obj.roles = message.roles;
        }
        if (message.attr) {
          const entries = Object.entries(message.attr);
          if (entries.length > 0) {
            obj.attr = {};
            entries.forEach(([k, v]) => {
              obj.attr[k] = v;
            });
          }
        }
        if (message.scope !== "") {
          obj.scope = message.scope;
        }
        return obj;
      }
    };
    exports.Principal_AttrEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object == null ? void 0 : object.value) ? object.value : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = message.value;
        }
        return obj;
      }
    };
    function isObject(value) {
      return typeof value === "object" && value !== null;
    }
    function isSet(value) {
      return value !== null && value !== void 0;
    }
  }
});

// node_modules/@cerbos/embedded/lib/protobuf/cerbos/request/v1/request.js
var require_request = __commonJS({
  "node_modules/@cerbos/embedded/lib/protobuf/cerbos/request/v1/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ServerInfoRequest = exports.AuxData_JWT = exports.AuxData = exports.CheckResourcesRequest_ResourceEntry = exports.CheckResourcesRequest = exports.CheckResourceBatchRequest_BatchEntry = exports.CheckResourceBatchRequest = exports.AttributesMap_AttrEntry = exports.AttributesMap = exports.ResourceSet_InstancesEntry = exports.ResourceSet = exports.CheckResourceSetRequest = exports.PlanResourcesRequest = exports.protobufPackage = void 0;
    var engine_1 = require_engine2();
    exports.protobufPackage = "cerbos.request.v1";
    exports.PlanResourcesRequest = {
      fromJSON(object) {
        return {
          requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
          action: isSet(object.action) ? globalThis.String(object.action) : "",
          principal: isSet(object.principal) ? engine_1.Principal.fromJSON(object.principal) : void 0,
          resource: isSet(object.resource) ? engine_1.PlanResourcesInput_Resource.fromJSON(object.resource) : void 0,
          auxData: isSet(object.auxData) ? exports.AuxData.fromJSON(object.auxData) : void 0,
          includeMeta: isSet(object.includeMeta) ? globalThis.Boolean(object.includeMeta) : false
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
          obj.requestId = message.requestId;
        }
        if (message.action !== "") {
          obj.action = message.action;
        }
        if (message.principal !== void 0) {
          obj.principal = engine_1.Principal.toJSON(message.principal);
        }
        if (message.resource !== void 0) {
          obj.resource = engine_1.PlanResourcesInput_Resource.toJSON(message.resource);
        }
        if (message.auxData !== void 0) {
          obj.auxData = exports.AuxData.toJSON(message.auxData);
        }
        if (message.includeMeta !== false) {
          obj.includeMeta = message.includeMeta;
        }
        return obj;
      }
    };
    exports.CheckResourceSetRequest = {
      fromJSON(object) {
        return {
          requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
          actions: globalThis.Array.isArray(object == null ? void 0 : object.actions) ? object.actions.map((e) => globalThis.String(e)) : [],
          principal: isSet(object.principal) ? engine_1.Principal.fromJSON(object.principal) : void 0,
          resource: isSet(object.resource) ? exports.ResourceSet.fromJSON(object.resource) : void 0,
          includeMeta: isSet(object.includeMeta) ? globalThis.Boolean(object.includeMeta) : false,
          auxData: isSet(object.auxData) ? exports.AuxData.fromJSON(object.auxData) : void 0
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.requestId !== "") {
          obj.requestId = message.requestId;
        }
        if ((_a = message.actions) == null ? void 0 : _a.length) {
          obj.actions = message.actions;
        }
        if (message.principal !== void 0) {
          obj.principal = engine_1.Principal.toJSON(message.principal);
        }
        if (message.resource !== void 0) {
          obj.resource = exports.ResourceSet.toJSON(message.resource);
        }
        if (message.includeMeta !== false) {
          obj.includeMeta = message.includeMeta;
        }
        if (message.auxData !== void 0) {
          obj.auxData = exports.AuxData.toJSON(message.auxData);
        }
        return obj;
      }
    };
    exports.ResourceSet = {
      fromJSON(object) {
        return {
          kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
          policyVersion: isSet(object.policyVersion) ? globalThis.String(object.policyVersion) : "",
          instances: isObject(object.instances) ? Object.entries(object.instances).reduce((acc, [key, value]) => {
            acc[key] = exports.AttributesMap.fromJSON(value);
            return acc;
          }, {}) : {},
          scope: isSet(object.scope) ? globalThis.String(object.scope) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.kind !== "") {
          obj.kind = message.kind;
        }
        if (message.policyVersion !== "") {
          obj.policyVersion = message.policyVersion;
        }
        if (message.instances) {
          const entries = Object.entries(message.instances);
          if (entries.length > 0) {
            obj.instances = {};
            entries.forEach(([k, v]) => {
              obj.instances[k] = exports.AttributesMap.toJSON(v);
            });
          }
        }
        if (message.scope !== "") {
          obj.scope = message.scope;
        }
        return obj;
      }
    };
    exports.ResourceSet_InstancesEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object.value) ? exports.AttributesMap.fromJSON(object.value) : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = exports.AttributesMap.toJSON(message.value);
        }
        return obj;
      }
    };
    exports.AttributesMap = {
      fromJSON(object) {
        return {
          attr: isObject(object.attr) ? Object.entries(object.attr).reduce((acc, [key, value]) => {
            acc[key] = value;
            return acc;
          }, {}) : {}
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.attr) {
          const entries = Object.entries(message.attr);
          if (entries.length > 0) {
            obj.attr = {};
            entries.forEach(([k, v]) => {
              obj.attr[k] = v;
            });
          }
        }
        return obj;
      }
    };
    exports.AttributesMap_AttrEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object == null ? void 0 : object.value) ? object.value : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = message.value;
        }
        return obj;
      }
    };
    exports.CheckResourceBatchRequest = {
      fromJSON(object) {
        return {
          requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
          principal: isSet(object.principal) ? engine_1.Principal.fromJSON(object.principal) : void 0,
          resources: globalThis.Array.isArray(object == null ? void 0 : object.resources) ? object.resources.map((e) => exports.CheckResourceBatchRequest_BatchEntry.fromJSON(e)) : [],
          auxData: isSet(object.auxData) ? exports.AuxData.fromJSON(object.auxData) : void 0
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.requestId !== "") {
          obj.requestId = message.requestId;
        }
        if (message.principal !== void 0) {
          obj.principal = engine_1.Principal.toJSON(message.principal);
        }
        if ((_a = message.resources) == null ? void 0 : _a.length) {
          obj.resources = message.resources.map((e) => exports.CheckResourceBatchRequest_BatchEntry.toJSON(e));
        }
        if (message.auxData !== void 0) {
          obj.auxData = exports.AuxData.toJSON(message.auxData);
        }
        return obj;
      }
    };
    exports.CheckResourceBatchRequest_BatchEntry = {
      fromJSON(object) {
        return {
          actions: globalThis.Array.isArray(object == null ? void 0 : object.actions) ? object.actions.map((e) => globalThis.String(e)) : [],
          resource: isSet(object.resource) ? engine_1.Resource.fromJSON(object.resource) : void 0
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.actions) == null ? void 0 : _a.length) {
          obj.actions = message.actions;
        }
        if (message.resource !== void 0) {
          obj.resource = engine_1.Resource.toJSON(message.resource);
        }
        return obj;
      }
    };
    exports.CheckResourcesRequest = {
      fromJSON(object) {
        return {
          requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
          includeMeta: isSet(object.includeMeta) ? globalThis.Boolean(object.includeMeta) : false,
          principal: isSet(object.principal) ? engine_1.Principal.fromJSON(object.principal) : void 0,
          resources: globalThis.Array.isArray(object == null ? void 0 : object.resources) ? object.resources.map((e) => exports.CheckResourcesRequest_ResourceEntry.fromJSON(e)) : [],
          auxData: isSet(object.auxData) ? exports.AuxData.fromJSON(object.auxData) : void 0
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.requestId !== "") {
          obj.requestId = message.requestId;
        }
        if (message.includeMeta !== false) {
          obj.includeMeta = message.includeMeta;
        }
        if (message.principal !== void 0) {
          obj.principal = engine_1.Principal.toJSON(message.principal);
        }
        if ((_a = message.resources) == null ? void 0 : _a.length) {
          obj.resources = message.resources.map((e) => exports.CheckResourcesRequest_ResourceEntry.toJSON(e));
        }
        if (message.auxData !== void 0) {
          obj.auxData = exports.AuxData.toJSON(message.auxData);
        }
        return obj;
      }
    };
    exports.CheckResourcesRequest_ResourceEntry = {
      fromJSON(object) {
        return {
          actions: globalThis.Array.isArray(object == null ? void 0 : object.actions) ? object.actions.map((e) => globalThis.String(e)) : [],
          resource: isSet(object.resource) ? engine_1.Resource.fromJSON(object.resource) : void 0
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.actions) == null ? void 0 : _a.length) {
          obj.actions = message.actions;
        }
        if (message.resource !== void 0) {
          obj.resource = engine_1.Resource.toJSON(message.resource);
        }
        return obj;
      }
    };
    exports.AuxData = {
      fromJSON(object) {
        return {
          jwt: isSet(object.jwt) ? exports.AuxData_JWT.fromJSON(object.jwt) : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.jwt !== void 0) {
          obj.jwt = exports.AuxData_JWT.toJSON(message.jwt);
        }
        return obj;
      }
    };
    exports.AuxData_JWT = {
      fromJSON(object) {
        return {
          token: isSet(object.token) ? globalThis.String(object.token) : "",
          keySetId: isSet(object.keySetId) ? globalThis.String(object.keySetId) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.token !== "") {
          obj.token = message.token;
        }
        if (message.keySetId !== "") {
          obj.keySetId = message.keySetId;
        }
        return obj;
      }
    };
    exports.ServerInfoRequest = {
      fromJSON(_) {
        return {};
      },
      toJSON(_) {
        const obj = {};
        return obj;
      }
    };
    function isObject(value) {
      return typeof value === "object" && value !== null;
    }
    function isSet(value) {
      return value !== null && value !== void 0;
    }
  }
});

// node_modules/@cerbos/embedded/lib/protobuf/cerbos/effect/v1/effect.js
var require_effect2 = __commonJS({
  "node_modules/@cerbos/embedded/lib/protobuf/cerbos/effect/v1/effect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.effectToJSON = exports.effectFromJSON = exports.Effect = exports.protobufPackage = void 0;
    exports.protobufPackage = "cerbos.effect.v1";
    var Effect;
    (function(Effect2) {
      Effect2[Effect2["EFFECT_UNSPECIFIED"] = 0] = "EFFECT_UNSPECIFIED";
      Effect2[Effect2["EFFECT_ALLOW"] = 1] = "EFFECT_ALLOW";
      Effect2[Effect2["EFFECT_DENY"] = 2] = "EFFECT_DENY";
      Effect2[Effect2["EFFECT_NO_MATCH"] = 3] = "EFFECT_NO_MATCH";
    })(Effect || (exports.Effect = Effect = {}));
    function effectFromJSON(object) {
      switch (object) {
        case 0:
        case "EFFECT_UNSPECIFIED":
          return Effect.EFFECT_UNSPECIFIED;
        case 1:
        case "EFFECT_ALLOW":
          return Effect.EFFECT_ALLOW;
        case 2:
        case "EFFECT_DENY":
          return Effect.EFFECT_DENY;
        case 3:
        case "EFFECT_NO_MATCH":
          return Effect.EFFECT_NO_MATCH;
        default:
          throw new globalThis.Error("Unrecognized enum value " + object + " for enum Effect");
      }
    }
    exports.effectFromJSON = effectFromJSON;
    function effectToJSON(object) {
      switch (object) {
        case Effect.EFFECT_UNSPECIFIED:
          return "EFFECT_UNSPECIFIED";
        case Effect.EFFECT_ALLOW:
          return "EFFECT_ALLOW";
        case Effect.EFFECT_DENY:
          return "EFFECT_DENY";
        case Effect.EFFECT_NO_MATCH:
          return "EFFECT_NO_MATCH";
        default:
          throw new globalThis.Error("Unrecognized enum value " + object + " for enum Effect");
      }
    }
    exports.effectToJSON = effectToJSON;
  }
});

// node_modules/@cerbos/embedded/lib/protobuf/cerbos/schema/v1/schema.js
var require_schema2 = __commonJS({
  "node_modules/@cerbos/embedded/lib/protobuf/cerbos/schema/v1/schema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError = exports.validationError_SourceToJSON = exports.validationError_SourceFromJSON = exports.ValidationError_Source = exports.protobufPackage = void 0;
    exports.protobufPackage = "cerbos.schema.v1";
    var ValidationError_Source;
    (function(ValidationError_Source2) {
      ValidationError_Source2[ValidationError_Source2["SOURCE_UNSPECIFIED"] = 0] = "SOURCE_UNSPECIFIED";
      ValidationError_Source2[ValidationError_Source2["SOURCE_PRINCIPAL"] = 1] = "SOURCE_PRINCIPAL";
      ValidationError_Source2[ValidationError_Source2["SOURCE_RESOURCE"] = 2] = "SOURCE_RESOURCE";
    })(ValidationError_Source || (exports.ValidationError_Source = ValidationError_Source = {}));
    function validationError_SourceFromJSON(object) {
      switch (object) {
        case 0:
        case "SOURCE_UNSPECIFIED":
          return ValidationError_Source.SOURCE_UNSPECIFIED;
        case 1:
        case "SOURCE_PRINCIPAL":
          return ValidationError_Source.SOURCE_PRINCIPAL;
        case 2:
        case "SOURCE_RESOURCE":
          return ValidationError_Source.SOURCE_RESOURCE;
        default:
          throw new globalThis.Error("Unrecognized enum value " + object + " for enum ValidationError_Source");
      }
    }
    exports.validationError_SourceFromJSON = validationError_SourceFromJSON;
    function validationError_SourceToJSON(object) {
      switch (object) {
        case ValidationError_Source.SOURCE_UNSPECIFIED:
          return "SOURCE_UNSPECIFIED";
        case ValidationError_Source.SOURCE_PRINCIPAL:
          return "SOURCE_PRINCIPAL";
        case ValidationError_Source.SOURCE_RESOURCE:
          return "SOURCE_RESOURCE";
        default:
          throw new globalThis.Error("Unrecognized enum value " + object + " for enum ValidationError_Source");
      }
    }
    exports.validationError_SourceToJSON = validationError_SourceToJSON;
    exports.ValidationError = {
      fromJSON(object) {
        return {
          path: isSet(object.path) ? globalThis.String(object.path) : "",
          message: isSet(object.message) ? globalThis.String(object.message) : "",
          source: isSet(object.source) ? validationError_SourceFromJSON(object.source) : 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.path !== "") {
          obj.path = message.path;
        }
        if (message.message !== "") {
          obj.message = message.message;
        }
        if (message.source !== 0) {
          obj.source = validationError_SourceToJSON(message.source);
        }
        return obj;
      }
    };
    function isSet(value) {
      return value !== null && value !== void 0;
    }
  }
});

// node_modules/@cerbos/embedded/lib/protobuf/cerbos/response/v1/response.js
var require_response = __commonJS({
  "node_modules/@cerbos/embedded/lib/protobuf/cerbos/response/v1/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ServerInfoResponse = exports.CheckResourcesResponse_ResultEntry_ActionsEntry = exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry = exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta = exports.CheckResourcesResponse_ResultEntry_Meta = exports.CheckResourcesResponse_ResultEntry_Resource = exports.CheckResourcesResponse_ResultEntry = exports.CheckResourcesResponse = exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry = exports.CheckResourceBatchResponse_ActionEffectMap = exports.CheckResourceBatchResponse = exports.CheckResourceSetResponse_ResourceInstancesEntry = exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry = exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry = exports.CheckResourceSetResponse_Meta_ActionMeta = exports.CheckResourceSetResponse_Meta_EffectMeta = exports.CheckResourceSetResponse_Meta = exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry = exports.CheckResourceSetResponse_ActionEffectMap = exports.CheckResourceSetResponse = exports.PlanResourcesResponse_Meta = exports.PlanResourcesResponse = exports.protobufPackage = void 0;
    var effect_1 = require_effect2();
    var engine_1 = require_engine2();
    var schema_1 = require_schema2();
    exports.protobufPackage = "cerbos.response.v1";
    exports.PlanResourcesResponse = {
      fromJSON(object) {
        return {
          requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
          action: isSet(object.action) ? globalThis.String(object.action) : "",
          resourceKind: isSet(object.resourceKind) ? globalThis.String(object.resourceKind) : "",
          policyVersion: isSet(object.policyVersion) ? globalThis.String(object.policyVersion) : "",
          filter: isSet(object.filter) ? engine_1.PlanResourcesFilter.fromJSON(object.filter) : void 0,
          meta: isSet(object.meta) ? exports.PlanResourcesResponse_Meta.fromJSON(object.meta) : void 0,
          validationErrors: globalThis.Array.isArray(object == null ? void 0 : object.validationErrors) ? object.validationErrors.map((e) => schema_1.ValidationError.fromJSON(e)) : [],
          cerbosCallId: isSet(object.cerbosCallId) ? globalThis.String(object.cerbosCallId) : ""
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.requestId !== "") {
          obj.requestId = message.requestId;
        }
        if (message.action !== "") {
          obj.action = message.action;
        }
        if (message.resourceKind !== "") {
          obj.resourceKind = message.resourceKind;
        }
        if (message.policyVersion !== "") {
          obj.policyVersion = message.policyVersion;
        }
        if (message.filter !== void 0) {
          obj.filter = engine_1.PlanResourcesFilter.toJSON(message.filter);
        }
        if (message.meta !== void 0) {
          obj.meta = exports.PlanResourcesResponse_Meta.toJSON(message.meta);
        }
        if ((_a = message.validationErrors) == null ? void 0 : _a.length) {
          obj.validationErrors = message.validationErrors.map((e) => schema_1.ValidationError.toJSON(e));
        }
        if (message.cerbosCallId !== "") {
          obj.cerbosCallId = message.cerbosCallId;
        }
        return obj;
      }
    };
    exports.PlanResourcesResponse_Meta = {
      fromJSON(object) {
        return {
          filterDebug: isSet(object.filterDebug) ? globalThis.String(object.filterDebug) : "",
          matchedScope: isSet(object.matchedScope) ? globalThis.String(object.matchedScope) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.filterDebug !== "") {
          obj.filterDebug = message.filterDebug;
        }
        if (message.matchedScope !== "") {
          obj.matchedScope = message.matchedScope;
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse = {
      fromJSON(object) {
        return {
          requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
          resourceInstances: isObject(object.resourceInstances) ? Object.entries(object.resourceInstances).reduce((acc, [key, value]) => {
            acc[key] = exports.CheckResourceSetResponse_ActionEffectMap.fromJSON(value);
            return acc;
          }, {}) : {},
          meta: isSet(object.meta) ? exports.CheckResourceSetResponse_Meta.fromJSON(object.meta) : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
          obj.requestId = message.requestId;
        }
        if (message.resourceInstances) {
          const entries = Object.entries(message.resourceInstances);
          if (entries.length > 0) {
            obj.resourceInstances = {};
            entries.forEach(([k, v]) => {
              obj.resourceInstances[k] = exports.CheckResourceSetResponse_ActionEffectMap.toJSON(v);
            });
          }
        }
        if (message.meta !== void 0) {
          obj.meta = exports.CheckResourceSetResponse_Meta.toJSON(message.meta);
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse_ActionEffectMap = {
      fromJSON(object) {
        return {
          actions: isObject(object.actions) ? Object.entries(object.actions).reduce((acc, [key, value]) => {
            acc[key] = (0, effect_1.effectFromJSON)(value);
            return acc;
          }, {}) : {},
          validationErrors: globalThis.Array.isArray(object == null ? void 0 : object.validationErrors) ? object.validationErrors.map((e) => schema_1.ValidationError.fromJSON(e)) : []
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.actions) {
          const entries = Object.entries(message.actions);
          if (entries.length > 0) {
            obj.actions = {};
            entries.forEach(([k, v]) => {
              obj.actions[k] = (0, effect_1.effectToJSON)(v);
            });
          }
        }
        if ((_a = message.validationErrors) == null ? void 0 : _a.length) {
          obj.validationErrors = message.validationErrors.map((e) => schema_1.ValidationError.toJSON(e));
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse_ActionEffectMap_ActionsEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object.value) ? (0, effect_1.effectFromJSON)(object.value) : 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== 0) {
          obj.value = (0, effect_1.effectToJSON)(message.value);
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse_Meta = {
      fromJSON(object) {
        return {
          resourceInstances: isObject(object.resourceInstances) ? Object.entries(object.resourceInstances).reduce((acc, [key, value]) => {
            acc[key] = exports.CheckResourceSetResponse_Meta_ActionMeta.fromJSON(value);
            return acc;
          }, {}) : {}
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.resourceInstances) {
          const entries = Object.entries(message.resourceInstances);
          if (entries.length > 0) {
            obj.resourceInstances = {};
            entries.forEach(([k, v]) => {
              obj.resourceInstances[k] = exports.CheckResourceSetResponse_Meta_ActionMeta.toJSON(v);
            });
          }
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse_Meta_EffectMeta = {
      fromJSON(object) {
        return {
          matchedPolicy: isSet(object.matchedPolicy) ? globalThis.String(object.matchedPolicy) : "",
          matchedScope: isSet(object.matchedScope) ? globalThis.String(object.matchedScope) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.matchedPolicy !== "") {
          obj.matchedPolicy = message.matchedPolicy;
        }
        if (message.matchedScope !== "") {
          obj.matchedScope = message.matchedScope;
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse_Meta_ActionMeta = {
      fromJSON(object) {
        return {
          actions: isObject(object.actions) ? Object.entries(object.actions).reduce((acc, [key, value]) => {
            acc[key] = exports.CheckResourceSetResponse_Meta_EffectMeta.fromJSON(value);
            return acc;
          }, {}) : {},
          effectiveDerivedRoles: globalThis.Array.isArray(object == null ? void 0 : object.effectiveDerivedRoles) ? object.effectiveDerivedRoles.map((e) => globalThis.String(e)) : []
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.actions) {
          const entries = Object.entries(message.actions);
          if (entries.length > 0) {
            obj.actions = {};
            entries.forEach(([k, v]) => {
              obj.actions[k] = exports.CheckResourceSetResponse_Meta_EffectMeta.toJSON(v);
            });
          }
        }
        if ((_a = message.effectiveDerivedRoles) == null ? void 0 : _a.length) {
          obj.effectiveDerivedRoles = message.effectiveDerivedRoles;
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse_Meta_ActionMeta_ActionsEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object.value) ? exports.CheckResourceSetResponse_Meta_EffectMeta.fromJSON(object.value) : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = exports.CheckResourceSetResponse_Meta_EffectMeta.toJSON(message.value);
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse_Meta_ResourceInstancesEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object.value) ? exports.CheckResourceSetResponse_Meta_ActionMeta.fromJSON(object.value) : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = exports.CheckResourceSetResponse_Meta_ActionMeta.toJSON(message.value);
        }
        return obj;
      }
    };
    exports.CheckResourceSetResponse_ResourceInstancesEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object.value) ? exports.CheckResourceSetResponse_ActionEffectMap.fromJSON(object.value) : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = exports.CheckResourceSetResponse_ActionEffectMap.toJSON(message.value);
        }
        return obj;
      }
    };
    exports.CheckResourceBatchResponse = {
      fromJSON(object) {
        return {
          requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
          results: globalThis.Array.isArray(object == null ? void 0 : object.results) ? object.results.map((e) => exports.CheckResourceBatchResponse_ActionEffectMap.fromJSON(e)) : []
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.requestId !== "") {
          obj.requestId = message.requestId;
        }
        if ((_a = message.results) == null ? void 0 : _a.length) {
          obj.results = message.results.map((e) => exports.CheckResourceBatchResponse_ActionEffectMap.toJSON(e));
        }
        return obj;
      }
    };
    exports.CheckResourceBatchResponse_ActionEffectMap = {
      fromJSON(object) {
        return {
          resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
          actions: isObject(object.actions) ? Object.entries(object.actions).reduce((acc, [key, value]) => {
            acc[key] = (0, effect_1.effectFromJSON)(value);
            return acc;
          }, {}) : {},
          validationErrors: globalThis.Array.isArray(object == null ? void 0 : object.validationErrors) ? object.validationErrors.map((e) => schema_1.ValidationError.fromJSON(e)) : []
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.resourceId !== "") {
          obj.resourceId = message.resourceId;
        }
        if (message.actions) {
          const entries = Object.entries(message.actions);
          if (entries.length > 0) {
            obj.actions = {};
            entries.forEach(([k, v]) => {
              obj.actions[k] = (0, effect_1.effectToJSON)(v);
            });
          }
        }
        if ((_a = message.validationErrors) == null ? void 0 : _a.length) {
          obj.validationErrors = message.validationErrors.map((e) => schema_1.ValidationError.toJSON(e));
        }
        return obj;
      }
    };
    exports.CheckResourceBatchResponse_ActionEffectMap_ActionsEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object.value) ? (0, effect_1.effectFromJSON)(object.value) : 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== 0) {
          obj.value = (0, effect_1.effectToJSON)(message.value);
        }
        return obj;
      }
    };
    exports.CheckResourcesResponse = {
      fromJSON(object) {
        return {
          requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
          results: globalThis.Array.isArray(object == null ? void 0 : object.results) ? object.results.map((e) => exports.CheckResourcesResponse_ResultEntry.fromJSON(e)) : [],
          cerbosCallId: isSet(object.cerbosCallId) ? globalThis.String(object.cerbosCallId) : ""
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.requestId !== "") {
          obj.requestId = message.requestId;
        }
        if ((_a = message.results) == null ? void 0 : _a.length) {
          obj.results = message.results.map((e) => exports.CheckResourcesResponse_ResultEntry.toJSON(e));
        }
        if (message.cerbosCallId !== "") {
          obj.cerbosCallId = message.cerbosCallId;
        }
        return obj;
      }
    };
    exports.CheckResourcesResponse_ResultEntry = {
      fromJSON(object) {
        return {
          resource: isSet(object.resource) ? exports.CheckResourcesResponse_ResultEntry_Resource.fromJSON(object.resource) : void 0,
          actions: isObject(object.actions) ? Object.entries(object.actions).reduce((acc, [key, value]) => {
            acc[key] = (0, effect_1.effectFromJSON)(value);
            return acc;
          }, {}) : {},
          validationErrors: globalThis.Array.isArray(object == null ? void 0 : object.validationErrors) ? object.validationErrors.map((e) => schema_1.ValidationError.fromJSON(e)) : [],
          meta: isSet(object.meta) ? exports.CheckResourcesResponse_ResultEntry_Meta.fromJSON(object.meta) : void 0,
          outputs: globalThis.Array.isArray(object == null ? void 0 : object.outputs) ? object.outputs.map((e) => engine_1.OutputEntry.fromJSON(e)) : []
        };
      },
      toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.resource !== void 0) {
          obj.resource = exports.CheckResourcesResponse_ResultEntry_Resource.toJSON(message.resource);
        }
        if (message.actions) {
          const entries = Object.entries(message.actions);
          if (entries.length > 0) {
            obj.actions = {};
            entries.forEach(([k, v]) => {
              obj.actions[k] = (0, effect_1.effectToJSON)(v);
            });
          }
        }
        if ((_a = message.validationErrors) == null ? void 0 : _a.length) {
          obj.validationErrors = message.validationErrors.map((e) => schema_1.ValidationError.toJSON(e));
        }
        if (message.meta !== void 0) {
          obj.meta = exports.CheckResourcesResponse_ResultEntry_Meta.toJSON(message.meta);
        }
        if ((_b = message.outputs) == null ? void 0 : _b.length) {
          obj.outputs = message.outputs.map((e) => engine_1.OutputEntry.toJSON(e));
        }
        return obj;
      }
    };
    exports.CheckResourcesResponse_ResultEntry_Resource = {
      fromJSON(object) {
        return {
          id: isSet(object.id) ? globalThis.String(object.id) : "",
          kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
          policyVersion: isSet(object.policyVersion) ? globalThis.String(object.policyVersion) : "",
          scope: isSet(object.scope) ? globalThis.String(object.scope) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.id !== "") {
          obj.id = message.id;
        }
        if (message.kind !== "") {
          obj.kind = message.kind;
        }
        if (message.policyVersion !== "") {
          obj.policyVersion = message.policyVersion;
        }
        if (message.scope !== "") {
          obj.scope = message.scope;
        }
        return obj;
      }
    };
    exports.CheckResourcesResponse_ResultEntry_Meta = {
      fromJSON(object) {
        return {
          actions: isObject(object.actions) ? Object.entries(object.actions).reduce((acc, [key, value]) => {
            acc[key] = exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta.fromJSON(value);
            return acc;
          }, {}) : {},
          effectiveDerivedRoles: globalThis.Array.isArray(object == null ? void 0 : object.effectiveDerivedRoles) ? object.effectiveDerivedRoles.map((e) => globalThis.String(e)) : []
        };
      },
      toJSON(message) {
        var _a;
        const obj = {};
        if (message.actions) {
          const entries = Object.entries(message.actions);
          if (entries.length > 0) {
            obj.actions = {};
            entries.forEach(([k, v]) => {
              obj.actions[k] = exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta.toJSON(v);
            });
          }
        }
        if ((_a = message.effectiveDerivedRoles) == null ? void 0 : _a.length) {
          obj.effectiveDerivedRoles = message.effectiveDerivedRoles;
        }
        return obj;
      }
    };
    exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta = {
      fromJSON(object) {
        return {
          matchedPolicy: isSet(object.matchedPolicy) ? globalThis.String(object.matchedPolicy) : "",
          matchedScope: isSet(object.matchedScope) ? globalThis.String(object.matchedScope) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.matchedPolicy !== "") {
          obj.matchedPolicy = message.matchedPolicy;
        }
        if (message.matchedScope !== "") {
          obj.matchedScope = message.matchedScope;
        }
        return obj;
      }
    };
    exports.CheckResourcesResponse_ResultEntry_Meta_ActionsEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object.value) ? exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta.fromJSON(object.value) : void 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== void 0) {
          obj.value = exports.CheckResourcesResponse_ResultEntry_Meta_EffectMeta.toJSON(message.value);
        }
        return obj;
      }
    };
    exports.CheckResourcesResponse_ResultEntry_ActionsEntry = {
      fromJSON(object) {
        return {
          key: isSet(object.key) ? globalThis.String(object.key) : "",
          value: isSet(object.value) ? (0, effect_1.effectFromJSON)(object.value) : 0
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.key !== "") {
          obj.key = message.key;
        }
        if (message.value !== 0) {
          obj.value = (0, effect_1.effectToJSON)(message.value);
        }
        return obj;
      }
    };
    exports.ServerInfoResponse = {
      fromJSON(object) {
        return {
          version: isSet(object.version) ? globalThis.String(object.version) : "",
          commit: isSet(object.commit) ? globalThis.String(object.commit) : "",
          buildDate: isSet(object.buildDate) ? globalThis.String(object.buildDate) : ""
        };
      },
      toJSON(message) {
        const obj = {};
        if (message.version !== "") {
          obj.version = message.version;
        }
        if (message.commit !== "") {
          obj.commit = message.commit;
        }
        if (message.buildDate !== "") {
          obj.buildDate = message.buildDate;
        }
        return obj;
      }
    };
    function isObject(value) {
      return typeof value === "object" && value !== null;
    }
    function isSet(value) {
      return value !== null && value !== void 0;
    }
  }
});

// node_modules/@cerbos/embedded/lib/slice.js
var require_slice = __commonJS({
  "node_modules/@cerbos/embedded/lib/slice.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Slice = void 0;
    var utf8Decoder = new TextDecoder("utf-8", { fatal: true });
    var utf8Encoder = new TextEncoder();
    var Slice = class _Slice {
      constructor({ memory, deallocate }, offset, length) {
        __publicField(this, "offset");
        __publicField(this, "length");
        __publicField(this, "deallocate");
        __publicField(this, "bytes");
        this.offset = offset;
        this.length = length;
        this.deallocate = () => {
          deallocate(offset, length);
        };
        this.bytes = new Uint8Array(memory.buffer, offset, length);
      }
      static from(allocator, offsetAndLength) {
        return new _Slice(allocator, Number(offsetAndLength >> BigInt(32)), Number(offsetAndLength & BigInt(4294967295)));
      }
      static ofJSON(allocator, data) {
        const bytes = utf8Encoder.encode(JSON.stringify(data));
        const slice = new _Slice(allocator, Number(allocator.allocate(bytes.length)), bytes.length);
        try {
          slice.copy(bytes);
          return slice;
        } catch (error) {
          slice.deallocate();
          throw error;
        }
      }
      text() {
        return utf8Decoder.decode(this.bytes);
      }
      copy(bytes) {
        this.bytes.set(bytes);
      }
    };
    exports.Slice = Slice;
  }
});

// node_modules/@cerbos/embedded/lib/bundle.js
var require_bundle = __commonJS({
  "node_modules/@cerbos/embedded/lib/bundle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.download = exports.Bundle = void 0;
    var core_1 = require_lib();
    var request_1 = require_request();
    var response_1 = require_response();
    var slice_1 = require_slice();
    var services = {
      admin: {
        addOrUpdatePolicy: void 0,
        addOrUpdateSchema: void 0,
        deleteSchema: void 0,
        disablePolicy: void 0,
        enablePolicy: void 0,
        getPolicy: void 0,
        getSchema: void 0,
        listPolicies: void 0,
        listSchemas: void 0,
        reloadStore: void 0
      },
      cerbos: {
        checkResources: {
          method: "check",
          transformRequest: async (request, decodeJWTPayload) => {
            var _a;
            const transformedRequest = request_1.CheckResourcesRequest.toJSON(request);
            if ((_a = transformedRequest.auxData) == null ? void 0 : _a.jwt) {
              const jwt = transformedRequest.auxData.jwt;
              if (!jwt.keySetId) {
                delete jwt.keySetId;
              }
              transformedRequest.auxData.jwt = await decodeJWTPayload(jwt);
            }
            return transformedRequest;
          },
          transformResponse: (response) => response_1.CheckResourcesResponse.fromJSON(response)
        },
        planResources: void 0,
        serverInfo: void 0
      }
    };
    var Bundle = class _Bundle {
      constructor(etag, exports2, decodeJWTPayload) {
        __publicField(this, "etag");
        __publicField(this, "exports");
        __publicField(this, "decodeJWTPayload");
        __publicField(this, "_metadata");
        this.etag = etag;
        this.exports = exports2;
        this.decodeJWTPayload = decodeJWTPayload;
      }
      static async from(source, { decodeJWTPayload = cannotDecodeJWTPayload, globals, now = Date.now }) {
        if (typeof source === "string" || source instanceof URL) {
          source = await download(source);
        } else {
          source = await source;
        }
        const etag = source instanceof Response ? source.headers.get("ETag") ?? void 0 : void 0;
        const exports2 = await instantiate(source, {
          env: {
            now: () => secondsSinceUnixEpoch(now())
          }
        });
        if (globals) {
          const globalsSlice = slice_1.Slice.ofJSON(exports2, globals);
          try {
            exports2.set_globals(globalsSlice.offset, globalsSlice.length);
          } finally {
            globalsSlice.deallocate();
          }
        }
        return new _Bundle(etag, exports2, decodeJWTPayload);
      }
      get metadata() {
        if (!this._metadata) {
          const { version, buildTimestamp, policies } = JSON.parse(slice_1.Slice.from(this.exports, this.exports.metadata()).text());
          this._metadata = {
            commit: version,
            builtAt: new Date(buildTimestamp * 1e3),
            policies
          };
        }
        return this._metadata;
      }
      async perform(service, rpc, request) {
        const implementation = services[service][rpc];
        if (!implementation) {
          throw new core_1.NotOK(core_1.Status.UNIMPLEMENTED, `${rpc} is not implemented in embedded policy decision points`);
        }
        const { method, transformRequest, transformResponse } = implementation;
        const requestSlice = slice_1.Slice.ofJSON(this.exports, await transformRequest(request, this.decodeJWTPayload));
        let responseSlice;
        try {
          responseSlice = this.call(method, requestSlice);
        } finally {
          requestSlice.deallocate();
        }
        let responseText;
        try {
          responseText = responseSlice.text();
        } finally {
          responseSlice.deallocate();
        }
        try {
          return transformResponse(JSON.parse(responseText));
        } catch (_) {
          throw core_1.NotOK.fromJSON(responseText);
        }
      }
      call(method, { offset, length }) {
        return slice_1.Slice.from(this.exports, this.exports[method](offset, length));
      }
    };
    exports.Bundle = Bundle;
    function cannotDecodeJWTPayload() {
      throw new Error("To decode JWTs from auxiliary data, you must provide a `decodeJWTPayload` function");
    }
    function secondsSinceUnixEpoch(date) {
      const millisecondsSinceUnixEpoch = date instanceof Date ? date.getTime() : date;
      return BigInt(Math.floor(millisecondsSinceUnixEpoch / 1e3));
    }
    async function download(url, request) {
      try {
        return await fetch(url, request);
      } catch (error) {
        const message = `Failed to download from ${url.toString()}`;
        throw new Error(error instanceof Error ? `${message}: ${error.message}` : message, { cause: error });
      }
    }
    exports.download = download;
    async function instantiate(source, imports) {
      if (source instanceof Response) {
        return await instantiateStreaming(source, imports);
      }
      return instantiated(await WebAssembly.instantiate(source, imports));
    }
    async function instantiateStreaming(response, imports) {
      if (!response.ok) {
        throw new Error(`Failed to download from ${response.url}: HTTP ${response.status}`);
      }
      return instantiated(await WebAssembly.instantiateStreaming(response, imports));
    }
    function instantiated({ instance: { exports: exports2 } }) {
      return exports2;
    }
  }
});

// node_modules/@cerbos/embedded/lib/interval.js
var require_interval = __commonJS({
  "node_modules/@cerbos/embedded/lib/interval.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constrainAutoUpdateInterval = void 0;
    function constrainAutoUpdateInterval(interval) {
      return Math.max(interval ?? 6e4, 1e4);
    }
    exports.constrainAutoUpdateInterval = constrainAutoUpdateInterval;
  }
});

// node_modules/@cerbos/embedded/lib/loader.js
var require_loader = __commonJS({
  "node_modules/@cerbos/embedded/lib/loader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AutoUpdatingLoader = exports.Loader = exports.LoadError = void 0;
    var core_1 = require_lib();
    var bundle_1 = require_bundle();
    var interval_1 = require_interval();
    async function resolve(result) {
      const { bundle, error } = await result;
      if (error) {
        throw error;
      }
      return bundle;
    }
    var LoadError = class extends Error {
      constructor(cause) {
        const message = "Failed to load embedded policy decision point bundle";
        super(cause instanceof Error ? `${message}: ${cause.message}` : message, {
          cause
        });
        __publicField(this, "cause");
        this.cause = cause;
        (0, core_1._setErrorNameAndStack)(this);
      }
    };
    exports.LoadError = LoadError;
    var Loader = class {
      /**
       * Load an embedded policy decision point (PDP) bundle from a given source.
       *
       * @param source - WebAssembly binary code of an embedded PDP bundle, or a URL or HTTP response from which to stream it.
       * @param options - additional settings.
       *
       * @remarks
       * Bundle download URLs are available in the "Embedded" section of the "Decision points" page of your Cerbos Hub workspace.
       *
       * The bundle will be loaded in the background when the loader is created.
       * If loading fails, then the first request from the client using the loader will throw an error.
       * To detect failure to load the bundle before making any requests, provide an {@link Options.onError} callback or await the {@link Loader.active} method.
       *
       * @example
       * Fetch an embedded PDP bundle via HTTP in a {@link https://caniuse.com/wasm | supported browser} or Node.js 18.1+:
       *
       * ```typescript
       * const cerbos = new Loader("https://lite.cerbos.cloud/bundle?workspace=...&label=...");
       * ```
       *
       * @example
       * Read an embedded PDP bundle from disk in Node.js:
       *
       * ```typescript
       * import { readFile } from "fs/promises";
       *
       * const cerbos = new Loader(readFile("policies.wasm"));
       * ```
       */
      constructor(source, options = {}) {
        __publicField(this, "options");
        /** @internal */
        __publicField(this, "_active");
        /** @internal */
        __publicField(this, "_transport", async (service, rpc, request) => await (await resolve(this._active)).perform(service, rpc, request));
        this.options = options;
        this._active = this._load(source, true);
      }
      /**
       * Resolves to the metadata of the loaded bundle, or rejects with the error that was encountered when loading the bundle.
       */
      async active() {
        return (await resolve(this._active)).metadata;
      }
      /** @internal */
      async _load(source, initial = false) {
        try {
          const bundle = await bundle_1.Bundle.from(source, this.options);
          this._onLoad(bundle, initial);
          return { bundle };
        } catch (cause) {
          const error = new LoadError(cause);
          this._onError(error);
          return { error };
        }
      }
      /** @internal */
      _onLoad(bundle, _initial) {
        var _a, _b;
        (_b = (_a = this.options).onLoad) == null ? void 0 : _b.call(_a, bundle.metadata);
      }
      /** @internal */
      _onError(error) {
        var _a, _b;
        (_b = (_a = this.options).onError) == null ? void 0 : _b.call(_a, error);
      }
    };
    exports.Loader = Loader;
    var notModified = new Error("HTTP 304");
    var AutoUpdatingLoader = class extends Loader {
      /**
       * Load an embedded policy decision point bundle from a given URL.
       *
       * @param url - URL from which to stream bundles.
       * @param options - additional settings.
       *
       * @remarks
       * Bundle download URLs are available in the "Embedded" section of the "Decision points" page of your Cerbos Hub workspace.
       *
       * The bundle will be loaded in the background when the loader is created.
       * If initial loading fails, then the first request from the client using the loader will throw an error.
       * To detect failure to load the bundle before making any requests, provide an {@link Options.onError} callback or await the {@link Loader.active} method.
       *
       * Failure to load updates after the initial load will not cause requests from the client to throw errors,
       * but errors will be passed to the {@link Options.onError} callback.
       */
      constructor(url, { activateOnLoad = true, interval, ...options } = {}) {
        super(url, options);
        __publicField(this, "url");
        __publicField(this, "activateOnLoad");
        __publicField(this, "interval");
        __publicField(this, "_pending");
        __publicField(this, "etag");
        __publicField(this, "running", true);
        __publicField(this, "abortController");
        __publicField(this, "timeout");
        this.url = url;
        this.activateOnLoad = activateOnLoad;
        this.interval = (0, interval_1.constrainAutoUpdateInterval)(interval);
        this.scheduleUpdate();
      }
      /**
       * The metadata of a new embedded policy decision point bundle that has been downloaded but is not yet being used to evaluate policy decisions.
       *
       * @remarks
       * Only set if {@link AutoUpdateOptions.activateOnLoad} is `false` and an update has been downloaded.
       *
       * Use {@link AutoUpdatingLoader.activate} to start using the pending bundle to evaluate policy decisions.
       */
      get pending() {
        var _a;
        return (_a = this._pending) == null ? void 0 : _a.metadata;
      }
      /**
       * Promote the {@link AutoUpdatingLoader.pending | pending} embedded policy decision point bundle (if any) to active, so that it is used to evaluate policy decisions.
       *
       * @remarks
       * This method is a no-op if an update has not been downloaded, or if {@link AutoUpdateOptions.activateOnLoad} is `true` (the default).
       */
      activate() {
        if (this._pending) {
          this._active = { bundle: this._pending };
          this._pending = void 0;
        }
      }
      /**
       * Stops polling for new embedded policy decision point bundles, and aborts any in-flight updates.
       */
      stop() {
        var _a;
        this.running = false;
        (_a = this.abortController) == null ? void 0 : _a.abort();
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
      }
      /** @internal */
      _onLoad(bundle, initial) {
        this.etag = bundle.etag;
        if (!initial) {
          this._pending = bundle;
          if (this.activateOnLoad) {
            this.activate();
          }
        }
        super._onLoad(bundle, initial);
      }
      /** @internal */
      _onError(error) {
        if (!this.suppressError(error.cause)) {
          super._onError(error);
        }
      }
      scheduleUpdate() {
        var _a;
        if (!this.running) {
          return;
        }
        if ((_a = this.timeout) == null ? void 0 : _a.refresh) {
          this.timeout.refresh();
        } else {
          this.timeout = setTimeout(() => {
            void this.update();
          }, this.interval);
        }
      }
      async update() {
        var _a;
        (_a = this.abortController) == null ? void 0 : _a.abort();
        this.abortController = new AbortController();
        await this._load(this.download(this.abortController.signal));
        this.scheduleUpdate();
      }
      async download(signal) {
        const request = { signal };
        if (this.etag) {
          request.headers = { "If-None-Match": this.etag };
        }
        const response = await (0, bundle_1.download)(this.url, request);
        if (response.status === 304) {
          throw notModified;
        }
        return response;
      }
      suppressError(cause) {
        return cause === notModified || isAbortError(cause) && !this.running;
      }
    };
    exports.AutoUpdatingLoader = AutoUpdatingLoader;
    function isAbortError(error) {
      return error instanceof DOMException && error.name === "AbortError";
    }
  }
});

// node_modules/@cerbos/embedded/lib/client.js
var require_client2 = __commonJS({
  "node_modules/@cerbos/embedded/lib/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Embedded = void 0;
    var core_1 = require_lib();
    var loader_1 = require_loader();
    var Embedded = class extends core_1.Client {
      constructor(loaderOrSource, options) {
        const loader = loaderOrSource instanceof loader_1.Loader ? loaderOrSource : new loader_1.Loader(loaderOrSource, options);
        super(loader._transport, {});
        /**
         * The {@link Loader} used to load the embedded policy decision point bundle.
         */
        __publicField(this, "loader");
        this.loader = loader;
      }
    };
    exports.Embedded = Embedded;
  }
});

// node_modules/@cerbos/embedded/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@cerbos/embedded/lib/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_client2(), exports);
    __exportStar(require_loader(), exports);
  }
});
export default require_lib2();
//# sourceMappingURL=@cerbos_embedded.js.map
