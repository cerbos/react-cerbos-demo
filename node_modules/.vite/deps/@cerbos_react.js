import {
  require_jsx_runtime
} from "./chunk-PL7FREAV.js";
import {
  require_react
} from "./chunk-XLKA4T3M.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/dequal/dist/index.mjs
function find(iter, tar, key) {
  for (key of iter.keys()) {
    if (dequal(key, tar))
      return key;
  }
}
function dequal(foo, bar) {
  var ctor, len, tmp;
  if (foo === bar)
    return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date)
      return foo.getTime() === bar.getTime();
    if (ctor === RegExp)
      return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len]))
          ;
      }
      return len === -1;
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len;
        if (tmp && typeof tmp === "object") {
          tmp = find(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!bar.has(tmp))
          return false;
      }
      return true;
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len[0];
        if (tmp && typeof tmp === "object") {
          tmp = find(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!dequal(len[1], bar.get(tmp))) {
          return false;
        }
      }
      return true;
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo);
      bar = new Uint8Array(bar);
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len))
          ;
      }
      return len === -1;
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len])
          ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
          return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
          return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}
var has;
var init_dist = __esm({
  "node_modules/dequal/dist/index.mjs"() {
    has = Object.prototype.hasOwnProperty;
  }
});

// node_modules/use-deep-compare-effect/dist/use-deep-compare-effect.esm.js
var use_deep_compare_effect_esm_exports = {};
__export(use_deep_compare_effect_esm_exports, {
  default: () => useDeepCompareEffect,
  useDeepCompareEffectNoCheck: () => useDeepCompareEffectNoCheck,
  useDeepCompareMemoize: () => useDeepCompareMemoize
});
function checkDeps(deps) {
  if (!deps || !deps.length) {
    throw new Error("useDeepCompareEffect should not be used with no dependencies. Use React.useEffect instead.");
  }
  if (deps.every(isPrimitive)) {
    throw new Error("useDeepCompareEffect should not be used with dependencies that are all primitive values. Use React.useEffect instead.");
  }
}
function isPrimitive(val) {
  return val == null || /^[sbn]/.test(typeof val);
}
function useDeepCompareMemoize(value) {
  var ref = React.useRef(value);
  var signalRef = React.useRef(0);
  if (!dequal(value, ref.current)) {
    ref.current = value;
    signalRef.current += 1;
  }
  return React.useMemo(function() {
    return ref.current;
  }, [signalRef.current]);
}
function useDeepCompareEffect(callback, dependencies) {
  if (true) {
    checkDeps(dependencies);
  }
  return React.useEffect(callback, useDeepCompareMemoize(dependencies));
}
function useDeepCompareEffectNoCheck(callback, dependencies) {
  return React.useEffect(callback, useDeepCompareMemoize(dependencies));
}
var React;
var init_use_deep_compare_effect_esm = __esm({
  "node_modules/use-deep-compare-effect/dist/use-deep-compare-effect.esm.js"() {
    React = __toESM(require_react());
    init_dist();
  }
});

// node_modules/@cerbos/react/lib/cerbos-provider.js
var require_cerbos_provider = __commonJS({
  "node_modules/@cerbos/react/lib/cerbos-provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CerbosProvider = exports.CerbosContext = void 0;
    var jsx_runtime_1 = require_jsx_runtime();
    var react_1 = require_react();
    var use_deep_compare_effect_1 = (init_use_deep_compare_effect_esm(), __toCommonJS(use_deep_compare_effect_esm_exports));
    exports.CerbosContext = (0, react_1.createContext)(void 0);
    function CerbosProvider({ children, client, principal, auxData }) {
      const principalMemo = (0, use_deep_compare_effect_1.useDeepCompareMemoize)(principal);
      const auxDataMemo = (0, use_deep_compare_effect_1.useDeepCompareMemoize)(auxData);
      const value = (0, react_1.useMemo)(() => client.withPrincipal(principalMemo, auxDataMemo), [client, principalMemo, auxDataMemo]);
      return (0, jsx_runtime_1.jsx)(exports.CerbosContext.Provider, { value, children });
    }
    exports.CerbosProvider = CerbosProvider;
  }
});

// node_modules/@cerbos/react/lib/use-cerbos.js
var require_use_cerbos = __commonJS({
  "node_modules/@cerbos/react/lib/use-cerbos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useCerbos = void 0;
    var react_1 = require_react();
    var cerbos_provider_1 = require_cerbos_provider();
    function useCerbos() {
      const value = (0, react_1.useContext)(cerbos_provider_1.CerbosContext);
      if (!value) {
        throw new Error("CerbosProvider not found");
      }
      return value;
    }
    exports.useCerbos = useCerbos;
  }
});

// node_modules/@cerbos/react/lib/use-cerbos-request.js
var require_use_cerbos_request = __commonJS({
  "node_modules/@cerbos/react/lib/use-cerbos-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useIsAllowed = exports.useCheckResources = exports.useCheckResource = void 0;
    var react_1 = require_react();
    var use_deep_compare_effect_1 = (init_use_deep_compare_effect_esm(), __toCommonJS(use_deep_compare_effect_esm_exports));
    var use_cerbos_1 = require_use_cerbos();
    function useCerbosRequest(method, request, options) {
      const [isLoading, setIsLoading] = (0, react_1.useState)(true);
      const [data, setData] = (0, react_1.useState)();
      const [error, setError] = (0, react_1.useState)();
      const client = (0, use_cerbos_1.useCerbos)();
      const requestMemo = (0, use_deep_compare_effect_1.useDeepCompareMemoize)(request);
      const optionsMemo = (0, use_deep_compare_effect_1.useDeepCompareMemoize)(options);
      const load = (0, react_1.useCallback)(async (signal) => (
        // @ts-expect-error -- https://github.com/microsoft/TypeScript/issues/30581
        await client[method](requestMemo, {
          ...optionsMemo,
          signal
        })
      ), [client, method, optionsMemo, requestMemo]);
      (0, react_1.useEffect)(() => {
        setIsLoading(true);
        setData(void 0);
        setError(void 0);
        const abortController = new AbortController();
        load(abortController.signal).then((data2) => {
          if (!abortController.signal.aborted) {
            setIsLoading(false);
            setData(data2);
            setError(void 0);
          }
        }).catch((error2) => {
          if (!abortController.signal.aborted) {
            setIsLoading(false);
            setData(void 0);
            setError(error2 instanceof Error ? error2 : new Error("An unexpected error occurred", { cause: error2 }));
          }
        });
        return () => {
          abortController.abort();
        };
      }, [load]);
      return { isLoading, data, error };
    }
    function useCheckResource(request, options) {
      return useCerbosRequest("checkResource", request, options);
    }
    exports.useCheckResource = useCheckResource;
    function useCheckResources(request, options) {
      return useCerbosRequest("checkResources", request, options);
    }
    exports.useCheckResources = useCheckResources;
    function useIsAllowed(request, options) {
      return useCerbosRequest("isAllowed", request, options);
    }
    exports.useIsAllowed = useIsAllowed;
  }
});

// node_modules/@cerbos/react/lib/index.js
var require_lib = __commonJS({
  "node_modules/@cerbos/react/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useIsAllowed = exports.useCheckResources = exports.useCheckResource = exports.useCerbos = exports.CerbosProvider = void 0;
    var cerbos_provider_1 = require_cerbos_provider();
    Object.defineProperty(exports, "CerbosProvider", { enumerable: true, get: function() {
      return cerbos_provider_1.CerbosProvider;
    } });
    var use_cerbos_1 = require_use_cerbos();
    Object.defineProperty(exports, "useCerbos", { enumerable: true, get: function() {
      return use_cerbos_1.useCerbos;
    } });
    var use_cerbos_request_1 = require_use_cerbos_request();
    Object.defineProperty(exports, "useCheckResource", { enumerable: true, get: function() {
      return use_cerbos_request_1.useCheckResource;
    } });
    Object.defineProperty(exports, "useCheckResources", { enumerable: true, get: function() {
      return use_cerbos_request_1.useCheckResources;
    } });
    Object.defineProperty(exports, "useIsAllowed", { enumerable: true, get: function() {
      return use_cerbos_request_1.useIsAllowed;
    } });
  }
});
export default require_lib();
//# sourceMappingURL=@cerbos_react.js.map
