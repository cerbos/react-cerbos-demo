import { Duration } from "../../google/protobuf/duration";
import { Constraint } from "./expression";
export declare const protobufPackage = "buf.validate";
export declare enum KnownRegex {
    KNOWN_REGEX_UNSPECIFIED = 0,
    KNOWN_REGEX_HTTP_HEADER_NAME = 1,
    KNOWN_REGEX_HTTP_HEADER_VALUE = 2
}
export declare function knownRegexFromJSON(object: any): KnownRegex;
export declare function knownRegexToJSON(object: KnownRegex): string;
export interface FieldConstraints {
    cel: Constraint[];
    skipped: boolean;
    required: boolean;
    ignoreEmpty: boolean;
    type?: {
        $case: "float";
        float: FloatRules;
    } | {
        $case: "double";
        double: DoubleRules;
    } | {
        $case: "int32";
        int32: Int32Rules;
    } | {
        $case: "int64";
        int64: Int64Rules;
    } | {
        $case: "uint32";
        uint32: UInt32Rules;
    } | {
        $case: "uint64";
        uint64: UInt64Rules;
    } | {
        $case: "sint32";
        sint32: SInt32Rules;
    } | {
        $case: "sint64";
        sint64: SInt64Rules;
    } | {
        $case: "fixed32";
        fixed32: Fixed32Rules;
    } | {
        $case: "fixed64";
        fixed64: Fixed64Rules;
    } | {
        $case: "sfixed32";
        sfixed32: SFixed32Rules;
    } | {
        $case: "sfixed64";
        sfixed64: SFixed64Rules;
    } | {
        $case: "bool";
        bool: BoolRules;
    } | {
        $case: "string";
        string: StringRules;
    } | {
        $case: "bytes";
        bytes: BytesRules;
    } | {
        $case: "enum";
        enum: EnumRules;
    } | {
        $case: "repeated";
        repeated: RepeatedRules;
    } | {
        $case: "map";
        map: MapRules;
    } | {
        $case: "any";
        any: AnyRules;
    } | {
        $case: "duration";
        duration: DurationRules;
    } | {
        $case: "timestamp";
        timestamp: TimestampRules;
    } | undefined;
}
export interface FloatRules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
    finite: boolean;
}
export interface DoubleRules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
    finite: boolean;
}
export interface Int32Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface Int64Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface UInt32Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface UInt64Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface SInt32Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface SInt64Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface Fixed32Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface Fixed64Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface SFixed32Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface SFixed64Rules {
    const?: number | undefined;
    lessThan?: {
        $case: "lt";
        lt: number;
    } | {
        $case: "lte";
        lte: number;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: number;
    } | {
        $case: "gte";
        gte: number;
    } | undefined;
    in: number[];
    notIn: number[];
}
export interface BoolRules {
    const?: boolean | undefined;
}
export interface StringRules {
    const?: string | undefined;
    len?: number | undefined;
    minLen?: number | undefined;
    maxLen?: number | undefined;
    lenBytes?: number | undefined;
    minBytes?: number | undefined;
    maxBytes?: number | undefined;
    pattern?: string | undefined;
    prefix?: string | undefined;
    suffix?: string | undefined;
    contains?: string | undefined;
    notContains?: string | undefined;
    in: string[];
    notIn: string[];
    wellKnown?: {
        $case: "email";
        email: boolean;
    } | {
        $case: "hostname";
        hostname: boolean;
    } | {
        $case: "ip";
        ip: boolean;
    } | {
        $case: "ipv4";
        ipv4: boolean;
    } | {
        $case: "ipv6";
        ipv6: boolean;
    } | {
        $case: "uri";
        uri: boolean;
    } | {
        $case: "uriRef";
        uriRef: boolean;
    } | {
        $case: "address";
        address: boolean;
    } | {
        $case: "uuid";
        uuid: boolean;
    } | {
        $case: "ipWithPrefixlen";
        ipWithPrefixlen: boolean;
    } | {
        $case: "ipv4WithPrefixlen";
        ipv4WithPrefixlen: boolean;
    } | {
        $case: "ipv6WithPrefixlen";
        ipv6WithPrefixlen: boolean;
    } | {
        $case: "ipPrefix";
        ipPrefix: boolean;
    } | {
        $case: "ipv4Prefix";
        ipv4Prefix: boolean;
    } | {
        $case: "ipv6Prefix";
        ipv6Prefix: boolean;
    } | {
        $case: "wellKnownRegex";
        wellKnownRegex: KnownRegex;
    } | undefined;
    strict?: boolean | undefined;
}
export interface BytesRules {
    const?: Uint8Array | undefined;
    len?: number | undefined;
    minLen?: number | undefined;
    maxLen?: number | undefined;
    pattern?: string | undefined;
    prefix?: Uint8Array | undefined;
    suffix?: Uint8Array | undefined;
    contains?: Uint8Array | undefined;
    in: Uint8Array[];
    notIn: Uint8Array[];
    wellKnown?: {
        $case: "ip";
        ip: boolean;
    } | {
        $case: "ipv4";
        ipv4: boolean;
    } | {
        $case: "ipv6";
        ipv6: boolean;
    } | undefined;
}
export interface EnumRules {
    const?: number | undefined;
    definedOnly?: boolean | undefined;
    in: number[];
    notIn: number[];
}
export interface RepeatedRules {
    minItems?: number | undefined;
    maxItems?: number | undefined;
    unique?: boolean | undefined;
    items?: FieldConstraints | undefined;
}
export interface MapRules {
    minPairs?: number | undefined;
    maxPairs?: number | undefined;
    keys?: FieldConstraints | undefined;
    values?: FieldConstraints | undefined;
}
export interface AnyRules {
    in: string[];
    notIn: string[];
}
export interface DurationRules {
    const?: Duration | undefined;
    lessThan?: {
        $case: "lt";
        lt: Duration;
    } | {
        $case: "lte";
        lte: Duration;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: Duration;
    } | {
        $case: "gte";
        gte: Duration;
    } | undefined;
    in: Duration[];
    notIn: Duration[];
}
export interface TimestampRules {
    const?: Date | undefined;
    lessThan?: {
        $case: "lt";
        lt: Date;
    } | {
        $case: "lte";
        lte: Date;
    } | {
        $case: "ltNow";
        ltNow: boolean;
    } | undefined;
    greaterThan?: {
        $case: "gt";
        gt: Date;
    } | {
        $case: "gte";
        gte: Date;
    } | {
        $case: "gtNow";
        gtNow: boolean;
    } | undefined;
    within?: Duration | undefined;
}
export declare const FieldConstraints: {
    fromJSON(object: any): FieldConstraints;
    toJSON(message: FieldConstraints): unknown;
};
export declare const FloatRules: {
    fromJSON(object: any): FloatRules;
    toJSON(message: FloatRules): unknown;
};
export declare const DoubleRules: {
    fromJSON(object: any): DoubleRules;
    toJSON(message: DoubleRules): unknown;
};
export declare const Int32Rules: {
    fromJSON(object: any): Int32Rules;
    toJSON(message: Int32Rules): unknown;
};
export declare const Int64Rules: {
    fromJSON(object: any): Int64Rules;
    toJSON(message: Int64Rules): unknown;
};
export declare const UInt32Rules: {
    fromJSON(object: any): UInt32Rules;
    toJSON(message: UInt32Rules): unknown;
};
export declare const UInt64Rules: {
    fromJSON(object: any): UInt64Rules;
    toJSON(message: UInt64Rules): unknown;
};
export declare const SInt32Rules: {
    fromJSON(object: any): SInt32Rules;
    toJSON(message: SInt32Rules): unknown;
};
export declare const SInt64Rules: {
    fromJSON(object: any): SInt64Rules;
    toJSON(message: SInt64Rules): unknown;
};
export declare const Fixed32Rules: {
    fromJSON(object: any): Fixed32Rules;
    toJSON(message: Fixed32Rules): unknown;
};
export declare const Fixed64Rules: {
    fromJSON(object: any): Fixed64Rules;
    toJSON(message: Fixed64Rules): unknown;
};
export declare const SFixed32Rules: {
    fromJSON(object: any): SFixed32Rules;
    toJSON(message: SFixed32Rules): unknown;
};
export declare const SFixed64Rules: {
    fromJSON(object: any): SFixed64Rules;
    toJSON(message: SFixed64Rules): unknown;
};
export declare const BoolRules: {
    fromJSON(object: any): BoolRules;
    toJSON(message: BoolRules): unknown;
};
export declare const StringRules: {
    fromJSON(object: any): StringRules;
    toJSON(message: StringRules): unknown;
};
export declare const BytesRules: {
    fromJSON(object: any): BytesRules;
    toJSON(message: BytesRules): unknown;
};
export declare const EnumRules: {
    fromJSON(object: any): EnumRules;
    toJSON(message: EnumRules): unknown;
};
export declare const RepeatedRules: {
    fromJSON(object: any): RepeatedRules;
    toJSON(message: RepeatedRules): unknown;
};
export declare const MapRules: {
    fromJSON(object: any): MapRules;
    toJSON(message: MapRules): unknown;
};
export declare const AnyRules: {
    fromJSON(object: any): AnyRules;
    toJSON(message: AnyRules): unknown;
};
export declare const DurationRules: {
    fromJSON(object: any): DurationRules;
    toJSON(message: DurationRules): unknown;
};
export declare const TimestampRules: {
    fromJSON(object: any): TimestampRules;
    toJSON(message: TimestampRules): unknown;
};
//# sourceMappingURL=validate.d.ts.map