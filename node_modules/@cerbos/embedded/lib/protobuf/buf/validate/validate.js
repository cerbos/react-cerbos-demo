"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimestampRules = exports.DurationRules = exports.AnyRules = exports.MapRules = exports.RepeatedRules = exports.EnumRules = exports.BytesRules = exports.StringRules = exports.BoolRules = exports.SFixed64Rules = exports.SFixed32Rules = exports.Fixed64Rules = exports.Fixed32Rules = exports.SInt64Rules = exports.SInt32Rules = exports.UInt64Rules = exports.UInt32Rules = exports.Int64Rules = exports.Int32Rules = exports.DoubleRules = exports.FloatRules = exports.FieldConstraints = exports.knownRegexToJSON = exports.knownRegexFromJSON = exports.KnownRegex = exports.protobufPackage = void 0;
/* eslint-disable */
const duration_1 = require("../../google/protobuf/duration");
const timestamp_1 = require("../../google/protobuf/timestamp");
const expression_1 = require("./expression");
exports.protobufPackage = "buf.validate";
var KnownRegex;
(function (KnownRegex) {
    KnownRegex[KnownRegex["KNOWN_REGEX_UNSPECIFIED"] = 0] = "KNOWN_REGEX_UNSPECIFIED";
    KnownRegex[KnownRegex["KNOWN_REGEX_HTTP_HEADER_NAME"] = 1] = "KNOWN_REGEX_HTTP_HEADER_NAME";
    KnownRegex[KnownRegex["KNOWN_REGEX_HTTP_HEADER_VALUE"] = 2] = "KNOWN_REGEX_HTTP_HEADER_VALUE";
})(KnownRegex || (exports.KnownRegex = KnownRegex = {}));
function knownRegexFromJSON(object) {
    switch (object) {
        case 0:
        case "KNOWN_REGEX_UNSPECIFIED":
            return KnownRegex.KNOWN_REGEX_UNSPECIFIED;
        case 1:
        case "KNOWN_REGEX_HTTP_HEADER_NAME":
            return KnownRegex.KNOWN_REGEX_HTTP_HEADER_NAME;
        case 2:
        case "KNOWN_REGEX_HTTP_HEADER_VALUE":
            return KnownRegex.KNOWN_REGEX_HTTP_HEADER_VALUE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum KnownRegex");
    }
}
exports.knownRegexFromJSON = knownRegexFromJSON;
function knownRegexToJSON(object) {
    switch (object) {
        case KnownRegex.KNOWN_REGEX_UNSPECIFIED:
            return "KNOWN_REGEX_UNSPECIFIED";
        case KnownRegex.KNOWN_REGEX_HTTP_HEADER_NAME:
            return "KNOWN_REGEX_HTTP_HEADER_NAME";
        case KnownRegex.KNOWN_REGEX_HTTP_HEADER_VALUE:
            return "KNOWN_REGEX_HTTP_HEADER_VALUE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum KnownRegex");
    }
}
exports.knownRegexToJSON = knownRegexToJSON;
exports.FieldConstraints = {
    fromJSON(object) {
        return {
            cel: globalThis.Array.isArray(object?.cel)
                ? object.cel.map((e) => expression_1.Constraint.fromJSON(e))
                : [],
            skipped: isSet(object.skipped)
                ? globalThis.Boolean(object.skipped)
                : false,
            required: isSet(object.required)
                ? globalThis.Boolean(object.required)
                : false,
            ignoreEmpty: isSet(object.ignoreEmpty)
                ? globalThis.Boolean(object.ignoreEmpty)
                : false,
            type: isSet(object.float)
                ? { $case: "float", float: exports.FloatRules.fromJSON(object.float) }
                : isSet(object.double)
                    ? { $case: "double", double: exports.DoubleRules.fromJSON(object.double) }
                    : isSet(object.int32)
                        ? { $case: "int32", int32: exports.Int32Rules.fromJSON(object.int32) }
                        : isSet(object.int64)
                            ? { $case: "int64", int64: exports.Int64Rules.fromJSON(object.int64) }
                            : isSet(object.uint32)
                                ? {
                                    $case: "uint32",
                                    uint32: exports.UInt32Rules.fromJSON(object.uint32),
                                }
                                : isSet(object.uint64)
                                    ? {
                                        $case: "uint64",
                                        uint64: exports.UInt64Rules.fromJSON(object.uint64),
                                    }
                                    : isSet(object.sint32)
                                        ? {
                                            $case: "sint32",
                                            sint32: exports.SInt32Rules.fromJSON(object.sint32),
                                        }
                                        : isSet(object.sint64)
                                            ? {
                                                $case: "sint64",
                                                sint64: exports.SInt64Rules.fromJSON(object.sint64),
                                            }
                                            : isSet(object.fixed32)
                                                ? {
                                                    $case: "fixed32",
                                                    fixed32: exports.Fixed32Rules.fromJSON(object.fixed32),
                                                }
                                                : isSet(object.fixed64)
                                                    ? {
                                                        $case: "fixed64",
                                                        fixed64: exports.Fixed64Rules.fromJSON(object.fixed64),
                                                    }
                                                    : isSet(object.sfixed32)
                                                        ? {
                                                            $case: "sfixed32",
                                                            sfixed32: exports.SFixed32Rules.fromJSON(object.sfixed32),
                                                        }
                                                        : isSet(object.sfixed64)
                                                            ? {
                                                                $case: "sfixed64",
                                                                sfixed64: exports.SFixed64Rules.fromJSON(object.sfixed64),
                                                            }
                                                            : isSet(object.bool)
                                                                ? {
                                                                    $case: "bool",
                                                                    bool: exports.BoolRules.fromJSON(object.bool),
                                                                }
                                                                : isSet(object.string)
                                                                    ? {
                                                                        $case: "string",
                                                                        string: exports.StringRules.fromJSON(object.string),
                                                                    }
                                                                    : isSet(object.bytes)
                                                                        ? {
                                                                            $case: "bytes",
                                                                            bytes: exports.BytesRules.fromJSON(object.bytes),
                                                                        }
                                                                        : isSet(object.enum)
                                                                            ? {
                                                                                $case: "enum",
                                                                                enum: exports.EnumRules.fromJSON(object.enum),
                                                                            }
                                                                            : isSet(object.repeated)
                                                                                ? {
                                                                                    $case: "repeated",
                                                                                    repeated: exports.RepeatedRules.fromJSON(object.repeated),
                                                                                }
                                                                                : isSet(object.map)
                                                                                    ? {
                                                                                        $case: "map",
                                                                                        map: exports.MapRules.fromJSON(object.map),
                                                                                    }
                                                                                    : isSet(object.any)
                                                                                        ? {
                                                                                            $case: "any",
                                                                                            any: exports.AnyRules.fromJSON(object.any),
                                                                                        }
                                                                                        : isSet(object.duration)
                                                                                            ? {
                                                                                                $case: "duration",
                                                                                                duration: exports.DurationRules.fromJSON(object.duration),
                                                                                            }
                                                                                            : isSet(object.timestamp)
                                                                                                ? {
                                                                                                    $case: "timestamp",
                                                                                                    timestamp: exports.TimestampRules.fromJSON(object.timestamp),
                                                                                                }
                                                                                                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cel?.length) {
            obj.cel = message.cel.map((e) => expression_1.Constraint.toJSON(e));
        }
        if (message.skipped !== false) {
            obj.skipped = message.skipped;
        }
        if (message.required !== false) {
            obj.required = message.required;
        }
        if (message.ignoreEmpty !== false) {
            obj.ignoreEmpty = message.ignoreEmpty;
        }
        if (message.type?.$case === "float") {
            obj.float = exports.FloatRules.toJSON(message.type.float);
        }
        if (message.type?.$case === "double") {
            obj.double = exports.DoubleRules.toJSON(message.type.double);
        }
        if (message.type?.$case === "int32") {
            obj.int32 = exports.Int32Rules.toJSON(message.type.int32);
        }
        if (message.type?.$case === "int64") {
            obj.int64 = exports.Int64Rules.toJSON(message.type.int64);
        }
        if (message.type?.$case === "uint32") {
            obj.uint32 = exports.UInt32Rules.toJSON(message.type.uint32);
        }
        if (message.type?.$case === "uint64") {
            obj.uint64 = exports.UInt64Rules.toJSON(message.type.uint64);
        }
        if (message.type?.$case === "sint32") {
            obj.sint32 = exports.SInt32Rules.toJSON(message.type.sint32);
        }
        if (message.type?.$case === "sint64") {
            obj.sint64 = exports.SInt64Rules.toJSON(message.type.sint64);
        }
        if (message.type?.$case === "fixed32") {
            obj.fixed32 = exports.Fixed32Rules.toJSON(message.type.fixed32);
        }
        if (message.type?.$case === "fixed64") {
            obj.fixed64 = exports.Fixed64Rules.toJSON(message.type.fixed64);
        }
        if (message.type?.$case === "sfixed32") {
            obj.sfixed32 = exports.SFixed32Rules.toJSON(message.type.sfixed32);
        }
        if (message.type?.$case === "sfixed64") {
            obj.sfixed64 = exports.SFixed64Rules.toJSON(message.type.sfixed64);
        }
        if (message.type?.$case === "bool") {
            obj.bool = exports.BoolRules.toJSON(message.type.bool);
        }
        if (message.type?.$case === "string") {
            obj.string = exports.StringRules.toJSON(message.type.string);
        }
        if (message.type?.$case === "bytes") {
            obj.bytes = exports.BytesRules.toJSON(message.type.bytes);
        }
        if (message.type?.$case === "enum") {
            obj.enum = exports.EnumRules.toJSON(message.type.enum);
        }
        if (message.type?.$case === "repeated") {
            obj.repeated = exports.RepeatedRules.toJSON(message.type.repeated);
        }
        if (message.type?.$case === "map") {
            obj.map = exports.MapRules.toJSON(message.type.map);
        }
        if (message.type?.$case === "any") {
            obj.any = exports.AnyRules.toJSON(message.type.any);
        }
        if (message.type?.$case === "duration") {
            obj.duration = exports.DurationRules.toJSON(message.type.duration);
        }
        if (message.type?.$case === "timestamp") {
            obj.timestamp = exports.TimestampRules.toJSON(message.type.timestamp);
        }
        return obj;
    },
};
exports.FloatRules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
            finite: isSet(object.finite) ? globalThis.Boolean(object.finite) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = message.const;
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = message.lessThan.lt;
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = message.lessThan.lte;
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = message.greaterThan.gt;
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = message.greaterThan.gte;
        }
        if (message.in?.length) {
            obj.in = message.in;
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn;
        }
        if (message.finite !== false) {
            obj.finite = message.finite;
        }
        return obj;
    },
};
exports.DoubleRules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
            finite: isSet(object.finite) ? globalThis.Boolean(object.finite) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = message.const;
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = message.lessThan.lt;
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = message.lessThan.lte;
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = message.greaterThan.gt;
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = message.greaterThan.gte;
        }
        if (message.in?.length) {
            obj.in = message.in;
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn;
        }
        if (message.finite !== false) {
            obj.finite = message.finite;
        }
        return obj;
    },
};
exports.Int32Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.Int64Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.UInt32Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.UInt64Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.SInt32Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.SInt64Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.Fixed32Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.Fixed64Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.SFixed32Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.SFixed64Rules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: globalThis.Number(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: globalThis.Number(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: globalThis.Number(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: globalThis.Number(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = Math.round(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = Math.round(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = Math.round(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = Math.round(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.BoolRules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Boolean(object.const) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = message.const;
        }
        return obj;
    },
};
exports.StringRules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.String(object.const) : undefined,
            len: isSet(object.len) ? globalThis.Number(object.len) : undefined,
            minLen: isSet(object.minLen)
                ? globalThis.Number(object.minLen)
                : undefined,
            maxLen: isSet(object.maxLen)
                ? globalThis.Number(object.maxLen)
                : undefined,
            lenBytes: isSet(object.lenBytes)
                ? globalThis.Number(object.lenBytes)
                : undefined,
            minBytes: isSet(object.minBytes)
                ? globalThis.Number(object.minBytes)
                : undefined,
            maxBytes: isSet(object.maxBytes)
                ? globalThis.Number(object.maxBytes)
                : undefined,
            pattern: isSet(object.pattern)
                ? globalThis.String(object.pattern)
                : undefined,
            prefix: isSet(object.prefix)
                ? globalThis.String(object.prefix)
                : undefined,
            suffix: isSet(object.suffix)
                ? globalThis.String(object.suffix)
                : undefined,
            contains: isSet(object.contains)
                ? globalThis.String(object.contains)
                : undefined,
            notContains: isSet(object.notContains)
                ? globalThis.String(object.notContains)
                : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.String(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.String(e))
                : [],
            wellKnown: isSet(object.email)
                ? { $case: "email", email: globalThis.Boolean(object.email) }
                : isSet(object.hostname)
                    ? { $case: "hostname", hostname: globalThis.Boolean(object.hostname) }
                    : isSet(object.ip)
                        ? { $case: "ip", ip: globalThis.Boolean(object.ip) }
                        : isSet(object.ipv4)
                            ? { $case: "ipv4", ipv4: globalThis.Boolean(object.ipv4) }
                            : isSet(object.ipv6)
                                ? { $case: "ipv6", ipv6: globalThis.Boolean(object.ipv6) }
                                : isSet(object.uri)
                                    ? { $case: "uri", uri: globalThis.Boolean(object.uri) }
                                    : isSet(object.uriRef)
                                        ? {
                                            $case: "uriRef",
                                            uriRef: globalThis.Boolean(object.uriRef),
                                        }
                                        : isSet(object.address)
                                            ? {
                                                $case: "address",
                                                address: globalThis.Boolean(object.address),
                                            }
                                            : isSet(object.uuid)
                                                ? {
                                                    $case: "uuid",
                                                    uuid: globalThis.Boolean(object.uuid),
                                                }
                                                : isSet(object.ipWithPrefixlen)
                                                    ? {
                                                        $case: "ipWithPrefixlen",
                                                        ipWithPrefixlen: globalThis.Boolean(object.ipWithPrefixlen),
                                                    }
                                                    : isSet(object.ipv4WithPrefixlen)
                                                        ? {
                                                            $case: "ipv4WithPrefixlen",
                                                            ipv4WithPrefixlen: globalThis.Boolean(object.ipv4WithPrefixlen),
                                                        }
                                                        : isSet(object.ipv6WithPrefixlen)
                                                            ? {
                                                                $case: "ipv6WithPrefixlen",
                                                                ipv6WithPrefixlen: globalThis.Boolean(object.ipv6WithPrefixlen),
                                                            }
                                                            : isSet(object.ipPrefix)
                                                                ? {
                                                                    $case: "ipPrefix",
                                                                    ipPrefix: globalThis.Boolean(object.ipPrefix),
                                                                }
                                                                : isSet(object.ipv4Prefix)
                                                                    ? {
                                                                        $case: "ipv4Prefix",
                                                                        ipv4Prefix: globalThis.Boolean(object.ipv4Prefix),
                                                                    }
                                                                    : isSet(object.ipv6Prefix)
                                                                        ? {
                                                                            $case: "ipv6Prefix",
                                                                            ipv6Prefix: globalThis.Boolean(object.ipv6Prefix),
                                                                        }
                                                                        : isSet(object.wellKnownRegex)
                                                                            ? {
                                                                                $case: "wellKnownRegex",
                                                                                wellKnownRegex: knownRegexFromJSON(object.wellKnownRegex),
                                                                            }
                                                                            : undefined,
            strict: isSet(object.strict)
                ? globalThis.Boolean(object.strict)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = message.const;
        }
        if (message.len !== undefined) {
            obj.len = Math.round(message.len);
        }
        if (message.minLen !== undefined) {
            obj.minLen = Math.round(message.minLen);
        }
        if (message.maxLen !== undefined) {
            obj.maxLen = Math.round(message.maxLen);
        }
        if (message.lenBytes !== undefined) {
            obj.lenBytes = Math.round(message.lenBytes);
        }
        if (message.minBytes !== undefined) {
            obj.minBytes = Math.round(message.minBytes);
        }
        if (message.maxBytes !== undefined) {
            obj.maxBytes = Math.round(message.maxBytes);
        }
        if (message.pattern !== undefined) {
            obj.pattern = message.pattern;
        }
        if (message.prefix !== undefined) {
            obj.prefix = message.prefix;
        }
        if (message.suffix !== undefined) {
            obj.suffix = message.suffix;
        }
        if (message.contains !== undefined) {
            obj.contains = message.contains;
        }
        if (message.notContains !== undefined) {
            obj.notContains = message.notContains;
        }
        if (message.in?.length) {
            obj.in = message.in;
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn;
        }
        if (message.wellKnown?.$case === "email") {
            obj.email = message.wellKnown.email;
        }
        if (message.wellKnown?.$case === "hostname") {
            obj.hostname = message.wellKnown.hostname;
        }
        if (message.wellKnown?.$case === "ip") {
            obj.ip = message.wellKnown.ip;
        }
        if (message.wellKnown?.$case === "ipv4") {
            obj.ipv4 = message.wellKnown.ipv4;
        }
        if (message.wellKnown?.$case === "ipv6") {
            obj.ipv6 = message.wellKnown.ipv6;
        }
        if (message.wellKnown?.$case === "uri") {
            obj.uri = message.wellKnown.uri;
        }
        if (message.wellKnown?.$case === "uriRef") {
            obj.uriRef = message.wellKnown.uriRef;
        }
        if (message.wellKnown?.$case === "address") {
            obj.address = message.wellKnown.address;
        }
        if (message.wellKnown?.$case === "uuid") {
            obj.uuid = message.wellKnown.uuid;
        }
        if (message.wellKnown?.$case === "ipWithPrefixlen") {
            obj.ipWithPrefixlen = message.wellKnown.ipWithPrefixlen;
        }
        if (message.wellKnown?.$case === "ipv4WithPrefixlen") {
            obj.ipv4WithPrefixlen = message.wellKnown.ipv4WithPrefixlen;
        }
        if (message.wellKnown?.$case === "ipv6WithPrefixlen") {
            obj.ipv6WithPrefixlen = message.wellKnown.ipv6WithPrefixlen;
        }
        if (message.wellKnown?.$case === "ipPrefix") {
            obj.ipPrefix = message.wellKnown.ipPrefix;
        }
        if (message.wellKnown?.$case === "ipv4Prefix") {
            obj.ipv4Prefix = message.wellKnown.ipv4Prefix;
        }
        if (message.wellKnown?.$case === "ipv6Prefix") {
            obj.ipv6Prefix = message.wellKnown.ipv6Prefix;
        }
        if (message.wellKnown?.$case === "wellKnownRegex") {
            obj.wellKnownRegex = knownRegexToJSON(message.wellKnown.wellKnownRegex);
        }
        if (message.strict !== undefined) {
            obj.strict = message.strict;
        }
        return obj;
    },
};
exports.BytesRules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? bytesFromBase64(object.const) : undefined,
            len: isSet(object.len) ? globalThis.Number(object.len) : undefined,
            minLen: isSet(object.minLen)
                ? globalThis.Number(object.minLen)
                : undefined,
            maxLen: isSet(object.maxLen)
                ? globalThis.Number(object.maxLen)
                : undefined,
            pattern: isSet(object.pattern)
                ? globalThis.String(object.pattern)
                : undefined,
            prefix: isSet(object.prefix) ? bytesFromBase64(object.prefix) : undefined,
            suffix: isSet(object.suffix) ? bytesFromBase64(object.suffix) : undefined,
            contains: isSet(object.contains)
                ? bytesFromBase64(object.contains)
                : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => bytesFromBase64(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => bytesFromBase64(e))
                : [],
            wellKnown: isSet(object.ip)
                ? { $case: "ip", ip: globalThis.Boolean(object.ip) }
                : isSet(object.ipv4)
                    ? { $case: "ipv4", ipv4: globalThis.Boolean(object.ipv4) }
                    : isSet(object.ipv6)
                        ? { $case: "ipv6", ipv6: globalThis.Boolean(object.ipv6) }
                        : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = base64FromBytes(message.const);
        }
        if (message.len !== undefined) {
            obj.len = Math.round(message.len);
        }
        if (message.minLen !== undefined) {
            obj.minLen = Math.round(message.minLen);
        }
        if (message.maxLen !== undefined) {
            obj.maxLen = Math.round(message.maxLen);
        }
        if (message.pattern !== undefined) {
            obj.pattern = message.pattern;
        }
        if (message.prefix !== undefined) {
            obj.prefix = base64FromBytes(message.prefix);
        }
        if (message.suffix !== undefined) {
            obj.suffix = base64FromBytes(message.suffix);
        }
        if (message.contains !== undefined) {
            obj.contains = base64FromBytes(message.contains);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => base64FromBytes(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => base64FromBytes(e));
        }
        if (message.wellKnown?.$case === "ip") {
            obj.ip = message.wellKnown.ip;
        }
        if (message.wellKnown?.$case === "ipv4") {
            obj.ipv4 = message.wellKnown.ipv4;
        }
        if (message.wellKnown?.$case === "ipv6") {
            obj.ipv6 = message.wellKnown.ipv6;
        }
        return obj;
    },
};
exports.EnumRules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? globalThis.Number(object.const) : undefined,
            definedOnly: isSet(object.definedOnly)
                ? globalThis.Boolean(object.definedOnly)
                : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.Number(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = Math.round(message.const);
        }
        if (message.definedOnly !== undefined) {
            obj.definedOnly = message.definedOnly;
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => Math.round(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => Math.round(e));
        }
        return obj;
    },
};
exports.RepeatedRules = {
    fromJSON(object) {
        return {
            minItems: isSet(object.minItems)
                ? globalThis.Number(object.minItems)
                : undefined,
            maxItems: isSet(object.maxItems)
                ? globalThis.Number(object.maxItems)
                : undefined,
            unique: isSet(object.unique)
                ? globalThis.Boolean(object.unique)
                : undefined,
            items: isSet(object.items)
                ? exports.FieldConstraints.fromJSON(object.items)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minItems !== undefined) {
            obj.minItems = Math.round(message.minItems);
        }
        if (message.maxItems !== undefined) {
            obj.maxItems = Math.round(message.maxItems);
        }
        if (message.unique !== undefined) {
            obj.unique = message.unique;
        }
        if (message.items !== undefined) {
            obj.items = exports.FieldConstraints.toJSON(message.items);
        }
        return obj;
    },
};
exports.MapRules = {
    fromJSON(object) {
        return {
            minPairs: isSet(object.minPairs)
                ? globalThis.Number(object.minPairs)
                : undefined,
            maxPairs: isSet(object.maxPairs)
                ? globalThis.Number(object.maxPairs)
                : undefined,
            keys: isSet(object.keys)
                ? exports.FieldConstraints.fromJSON(object.keys)
                : undefined,
            values: isSet(object.values)
                ? exports.FieldConstraints.fromJSON(object.values)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minPairs !== undefined) {
            obj.minPairs = Math.round(message.minPairs);
        }
        if (message.maxPairs !== undefined) {
            obj.maxPairs = Math.round(message.maxPairs);
        }
        if (message.keys !== undefined) {
            obj.keys = exports.FieldConstraints.toJSON(message.keys);
        }
        if (message.values !== undefined) {
            obj.values = exports.FieldConstraints.toJSON(message.values);
        }
        return obj;
    },
};
exports.AnyRules = {
    fromJSON(object) {
        return {
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => globalThis.String(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.in?.length) {
            obj.in = message.in;
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn;
        }
        return obj;
    },
};
exports.DurationRules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? duration_1.Duration.fromJSON(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: duration_1.Duration.fromJSON(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: duration_1.Duration.fromJSON(object.lte) }
                    : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: duration_1.Duration.fromJSON(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: duration_1.Duration.fromJSON(object.gte) }
                    : undefined,
            in: globalThis.Array.isArray(object?.in)
                ? object.in.map((e) => duration_1.Duration.fromJSON(e))
                : [],
            notIn: globalThis.Array.isArray(object?.notIn)
                ? object.notIn.map((e) => duration_1.Duration.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = duration_1.Duration.toJSON(message.const);
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = duration_1.Duration.toJSON(message.lessThan.lt);
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = duration_1.Duration.toJSON(message.lessThan.lte);
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = duration_1.Duration.toJSON(message.greaterThan.gt);
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = duration_1.Duration.toJSON(message.greaterThan.gte);
        }
        if (message.in?.length) {
            obj.in = message.in.map((e) => duration_1.Duration.toJSON(e));
        }
        if (message.notIn?.length) {
            obj.notIn = message.notIn.map((e) => duration_1.Duration.toJSON(e));
        }
        return obj;
    },
};
exports.TimestampRules = {
    fromJSON(object) {
        return {
            const: isSet(object.const) ? fromJsonTimestamp(object.const) : undefined,
            lessThan: isSet(object.lt)
                ? { $case: "lt", lt: fromJsonTimestamp(object.lt) }
                : isSet(object.lte)
                    ? { $case: "lte", lte: fromJsonTimestamp(object.lte) }
                    : isSet(object.ltNow)
                        ? { $case: "ltNow", ltNow: globalThis.Boolean(object.ltNow) }
                        : undefined,
            greaterThan: isSet(object.gt)
                ? { $case: "gt", gt: fromJsonTimestamp(object.gt) }
                : isSet(object.gte)
                    ? { $case: "gte", gte: fromJsonTimestamp(object.gte) }
                    : isSet(object.gtNow)
                        ? { $case: "gtNow", gtNow: globalThis.Boolean(object.gtNow) }
                        : undefined,
            within: isSet(object.within)
                ? duration_1.Duration.fromJSON(object.within)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.const !== undefined) {
            obj.const = message.const.toISOString();
        }
        if (message.lessThan?.$case === "lt") {
            obj.lt = message.lessThan.lt.toISOString();
        }
        if (message.lessThan?.$case === "lte") {
            obj.lte = message.lessThan.lte.toISOString();
        }
        if (message.lessThan?.$case === "ltNow") {
            obj.ltNow = message.lessThan.ltNow;
        }
        if (message.greaterThan?.$case === "gt") {
            obj.gt = message.greaterThan.gt.toISOString();
        }
        if (message.greaterThan?.$case === "gte") {
            obj.gte = message.greaterThan.gte.toISOString();
        }
        if (message.greaterThan?.$case === "gtNow") {
            obj.gtNow = message.greaterThan.gtNow;
        }
        if (message.within !== undefined) {
            obj.within = duration_1.Duration.toJSON(message.within);
        }
        return obj;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=validate.js.map