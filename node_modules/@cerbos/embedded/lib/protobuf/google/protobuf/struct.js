"use strict";
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListValue = exports.Value = exports.Struct_FieldsEntry = exports.Struct = exports.nullValueToJSON = exports.nullValueFromJSON = exports.NullValue = exports.protobufPackage = void 0;
exports.protobufPackage = "google.protobuf";
var NullValue;
(function (NullValue) {
    NullValue[NullValue["NULL_VALUE"] = 0] = "NULL_VALUE";
})(NullValue || (exports.NullValue = NullValue = {}));
function nullValueFromJSON(object) {
    switch (object) {
        case 0:
        case "NULL_VALUE":
            return NullValue.NULL_VALUE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum NullValue");
    }
}
exports.nullValueFromJSON = nullValueFromJSON;
function nullValueToJSON(object) {
    switch (object) {
        case NullValue.NULL_VALUE:
            return "NULL_VALUE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum NullValue");
    }
}
exports.nullValueToJSON = nullValueToJSON;
function createBaseStruct() {
    return { fields: {} };
}
exports.Struct = {
    fromJSON(object) {
        return {
            fields: isObject(object.fields)
                ? Object.entries(object.fields).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fields) {
            const entries = Object.entries(message.fields);
            if (entries.length > 0) {
                obj.fields = {};
                entries.forEach(([k, v]) => {
                    obj.fields[k] = v;
                });
            }
        }
        return obj;
    },
    wrap(object) {
        const struct = createBaseStruct();
        if (object !== undefined) {
            for (const key of Object.keys(object)) {
                struct.fields[key] = object[key];
            }
        }
        return struct;
    },
    unwrap(message) {
        const object = {};
        if (message.fields) {
            for (const key of Object.keys(message.fields)) {
                object[key] = message.fields[key];
            }
        }
        return object;
    },
};
exports.Struct_FieldsEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
};
function createBaseValue() {
    return { kind: undefined };
}
exports.Value = {
    fromJSON(object) {
        return {
            kind: isSet(object.nullValue)
                ? { $case: "nullValue", nullValue: nullValueFromJSON(object.nullValue) }
                : isSet(object.numberValue)
                    ? {
                        $case: "numberValue",
                        numberValue: globalThis.Number(object.numberValue),
                    }
                    : isSet(object.stringValue)
                        ? {
                            $case: "stringValue",
                            stringValue: globalThis.String(object.stringValue),
                        }
                        : isSet(object.boolValue)
                            ? {
                                $case: "boolValue",
                                boolValue: globalThis.Boolean(object.boolValue),
                            }
                            : isSet(object.structValue)
                                ? { $case: "structValue", structValue: object.structValue }
                                : isSet(object.listValue)
                                    ? { $case: "listValue", listValue: [...object.listValue] }
                                    : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.kind?.$case === "nullValue") {
            obj.nullValue = nullValueToJSON(message.kind.nullValue);
        }
        if (message.kind?.$case === "numberValue") {
            obj.numberValue = message.kind.numberValue;
        }
        if (message.kind?.$case === "stringValue") {
            obj.stringValue = message.kind.stringValue;
        }
        if (message.kind?.$case === "boolValue") {
            obj.boolValue = message.kind.boolValue;
        }
        if (message.kind?.$case === "structValue") {
            obj.structValue = message.kind.structValue;
        }
        if (message.kind?.$case === "listValue") {
            obj.listValue = message.kind.listValue;
        }
        return obj;
    },
    wrap(value) {
        const result = createBaseValue();
        if (value === null) {
            result.kind = { $case: "nullValue", nullValue: NullValue.NULL_VALUE };
        }
        else if (typeof value === "boolean") {
            result.kind = { $case: "boolValue", boolValue: value };
        }
        else if (typeof value === "number") {
            result.kind = { $case: "numberValue", numberValue: value };
        }
        else if (typeof value === "string") {
            result.kind = { $case: "stringValue", stringValue: value };
        }
        else if (globalThis.Array.isArray(value)) {
            result.kind = { $case: "listValue", listValue: value };
        }
        else if (typeof value === "object") {
            result.kind = { $case: "structValue", structValue: value };
        }
        else if (typeof value !== "undefined") {
            throw new globalThis.Error("Unsupported any value type: " + typeof value);
        }
        return result;
    },
    unwrap(message) {
        if (message.kind?.$case === "nullValue") {
            return null;
        }
        else if (message.kind?.$case === "numberValue") {
            return message.kind?.numberValue;
        }
        else if (message.kind?.$case === "stringValue") {
            return message.kind?.stringValue;
        }
        else if (message.kind?.$case === "boolValue") {
            return message.kind?.boolValue;
        }
        else if (message.kind?.$case === "structValue") {
            return message.kind?.structValue;
        }
        else if (message.kind?.$case === "listValue") {
            return message.kind?.listValue;
        }
        else {
            return undefined;
        }
    },
};
function createBaseListValue() {
    return { values: [] };
}
exports.ListValue = {
    fromJSON(object) {
        return {
            values: globalThis.Array.isArray(object?.values)
                ? [...object.values]
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.values?.length) {
            obj.values = message.values;
        }
        return obj;
    },
    wrap(array) {
        const result = createBaseListValue();
        result.values = array ?? [];
        return result;
    },
    unwrap(message) {
        if (message?.hasOwnProperty("values") &&
            globalThis.Array.isArray(message.values)) {
            return message.values;
        }
        else {
            return message;
        }
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=struct.js.map