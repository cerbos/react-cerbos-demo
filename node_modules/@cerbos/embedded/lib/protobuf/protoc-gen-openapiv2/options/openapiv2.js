"use strict";
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityRequirement_SecurityRequirementEntry = exports.SecurityRequirement_SecurityRequirementValue = exports.SecurityRequirement = exports.SecurityScheme_ExtensionsEntry = exports.SecurityScheme = exports.SecurityDefinitions_SecurityEntry = exports.SecurityDefinitions = exports.Tag_ExtensionsEntry = exports.Tag = exports.JSONSchema_ExtensionsEntry = exports.JSONSchema_FieldConfiguration = exports.JSONSchema = exports.Schema = exports.ExternalDocumentation = exports.License = exports.Contact = exports.Info_ExtensionsEntry = exports.Info = exports.Response_ExtensionsEntry = exports.Response_ExamplesEntry = exports.Response_HeadersEntry = exports.Response = exports.Header = exports.HeaderParameter = exports.Parameters = exports.Operation_ExtensionsEntry = exports.Operation_ResponsesEntry = exports.Operation = exports.Swagger_ExtensionsEntry = exports.Swagger_ResponsesEntry = exports.Swagger = exports.securityScheme_FlowToJSON = exports.securityScheme_FlowFromJSON = exports.SecurityScheme_Flow = exports.securityScheme_InToJSON = exports.securityScheme_InFromJSON = exports.SecurityScheme_In = exports.securityScheme_TypeToJSON = exports.securityScheme_TypeFromJSON = exports.SecurityScheme_Type = exports.jSONSchema_JSONSchemaSimpleTypesToJSON = exports.jSONSchema_JSONSchemaSimpleTypesFromJSON = exports.JSONSchema_JSONSchemaSimpleTypes = exports.headerParameter_TypeToJSON = exports.headerParameter_TypeFromJSON = exports.HeaderParameter_Type = exports.schemeToJSON = exports.schemeFromJSON = exports.Scheme = exports.protobufPackage = void 0;
exports.Scopes_ScopeEntry = exports.Scopes = void 0;
exports.protobufPackage = "grpc.gateway.protoc_gen_openapiv2.options";
var Scheme;
(function (Scheme) {
    Scheme[Scheme["UNKNOWN"] = 0] = "UNKNOWN";
    Scheme[Scheme["HTTP"] = 1] = "HTTP";
    Scheme[Scheme["HTTPS"] = 2] = "HTTPS";
    Scheme[Scheme["WS"] = 3] = "WS";
    Scheme[Scheme["WSS"] = 4] = "WSS";
})(Scheme || (exports.Scheme = Scheme = {}));
function schemeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return Scheme.UNKNOWN;
        case 1:
        case "HTTP":
            return Scheme.HTTP;
        case 2:
        case "HTTPS":
            return Scheme.HTTPS;
        case 3:
        case "WS":
            return Scheme.WS;
        case 4:
        case "WSS":
            return Scheme.WSS;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum Scheme");
    }
}
exports.schemeFromJSON = schemeFromJSON;
function schemeToJSON(object) {
    switch (object) {
        case Scheme.UNKNOWN:
            return "UNKNOWN";
        case Scheme.HTTP:
            return "HTTP";
        case Scheme.HTTPS:
            return "HTTPS";
        case Scheme.WS:
            return "WS";
        case Scheme.WSS:
            return "WSS";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum Scheme");
    }
}
exports.schemeToJSON = schemeToJSON;
var HeaderParameter_Type;
(function (HeaderParameter_Type) {
    HeaderParameter_Type[HeaderParameter_Type["UNKNOWN"] = 0] = "UNKNOWN";
    HeaderParameter_Type[HeaderParameter_Type["STRING"] = 1] = "STRING";
    HeaderParameter_Type[HeaderParameter_Type["NUMBER"] = 2] = "NUMBER";
    HeaderParameter_Type[HeaderParameter_Type["INTEGER"] = 3] = "INTEGER";
    HeaderParameter_Type[HeaderParameter_Type["BOOLEAN"] = 4] = "BOOLEAN";
})(HeaderParameter_Type || (exports.HeaderParameter_Type = HeaderParameter_Type = {}));
function headerParameter_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return HeaderParameter_Type.UNKNOWN;
        case 1:
        case "STRING":
            return HeaderParameter_Type.STRING;
        case 2:
        case "NUMBER":
            return HeaderParameter_Type.NUMBER;
        case 3:
        case "INTEGER":
            return HeaderParameter_Type.INTEGER;
        case 4:
        case "BOOLEAN":
            return HeaderParameter_Type.BOOLEAN;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum HeaderParameter_Type");
    }
}
exports.headerParameter_TypeFromJSON = headerParameter_TypeFromJSON;
function headerParameter_TypeToJSON(object) {
    switch (object) {
        case HeaderParameter_Type.UNKNOWN:
            return "UNKNOWN";
        case HeaderParameter_Type.STRING:
            return "STRING";
        case HeaderParameter_Type.NUMBER:
            return "NUMBER";
        case HeaderParameter_Type.INTEGER:
            return "INTEGER";
        case HeaderParameter_Type.BOOLEAN:
            return "BOOLEAN";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum HeaderParameter_Type");
    }
}
exports.headerParameter_TypeToJSON = headerParameter_TypeToJSON;
var JSONSchema_JSONSchemaSimpleTypes;
(function (JSONSchema_JSONSchemaSimpleTypes) {
    JSONSchema_JSONSchemaSimpleTypes[JSONSchema_JSONSchemaSimpleTypes["UNKNOWN"] = 0] = "UNKNOWN";
    JSONSchema_JSONSchemaSimpleTypes[JSONSchema_JSONSchemaSimpleTypes["ARRAY"] = 1] = "ARRAY";
    JSONSchema_JSONSchemaSimpleTypes[JSONSchema_JSONSchemaSimpleTypes["BOOLEAN"] = 2] = "BOOLEAN";
    JSONSchema_JSONSchemaSimpleTypes[JSONSchema_JSONSchemaSimpleTypes["INTEGER"] = 3] = "INTEGER";
    JSONSchema_JSONSchemaSimpleTypes[JSONSchema_JSONSchemaSimpleTypes["NULL"] = 4] = "NULL";
    JSONSchema_JSONSchemaSimpleTypes[JSONSchema_JSONSchemaSimpleTypes["NUMBER"] = 5] = "NUMBER";
    JSONSchema_JSONSchemaSimpleTypes[JSONSchema_JSONSchemaSimpleTypes["OBJECT"] = 6] = "OBJECT";
    JSONSchema_JSONSchemaSimpleTypes[JSONSchema_JSONSchemaSimpleTypes["STRING"] = 7] = "STRING";
})(JSONSchema_JSONSchemaSimpleTypes || (exports.JSONSchema_JSONSchemaSimpleTypes = JSONSchema_JSONSchemaSimpleTypes = {}));
function jSONSchema_JSONSchemaSimpleTypesFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return JSONSchema_JSONSchemaSimpleTypes.UNKNOWN;
        case 1:
        case "ARRAY":
            return JSONSchema_JSONSchemaSimpleTypes.ARRAY;
        case 2:
        case "BOOLEAN":
            return JSONSchema_JSONSchemaSimpleTypes.BOOLEAN;
        case 3:
        case "INTEGER":
            return JSONSchema_JSONSchemaSimpleTypes.INTEGER;
        case 4:
        case "NULL":
            return JSONSchema_JSONSchemaSimpleTypes.NULL;
        case 5:
        case "NUMBER":
            return JSONSchema_JSONSchemaSimpleTypes.NUMBER;
        case 6:
        case "OBJECT":
            return JSONSchema_JSONSchemaSimpleTypes.OBJECT;
        case 7:
        case "STRING":
            return JSONSchema_JSONSchemaSimpleTypes.STRING;
        default:
            throw new globalThis.Error("Unrecognized enum value " +
                object +
                " for enum JSONSchema_JSONSchemaSimpleTypes");
    }
}
exports.jSONSchema_JSONSchemaSimpleTypesFromJSON = jSONSchema_JSONSchemaSimpleTypesFromJSON;
function jSONSchema_JSONSchemaSimpleTypesToJSON(object) {
    switch (object) {
        case JSONSchema_JSONSchemaSimpleTypes.UNKNOWN:
            return "UNKNOWN";
        case JSONSchema_JSONSchemaSimpleTypes.ARRAY:
            return "ARRAY";
        case JSONSchema_JSONSchemaSimpleTypes.BOOLEAN:
            return "BOOLEAN";
        case JSONSchema_JSONSchemaSimpleTypes.INTEGER:
            return "INTEGER";
        case JSONSchema_JSONSchemaSimpleTypes.NULL:
            return "NULL";
        case JSONSchema_JSONSchemaSimpleTypes.NUMBER:
            return "NUMBER";
        case JSONSchema_JSONSchemaSimpleTypes.OBJECT:
            return "OBJECT";
        case JSONSchema_JSONSchemaSimpleTypes.STRING:
            return "STRING";
        default:
            throw new globalThis.Error("Unrecognized enum value " +
                object +
                " for enum JSONSchema_JSONSchemaSimpleTypes");
    }
}
exports.jSONSchema_JSONSchemaSimpleTypesToJSON = jSONSchema_JSONSchemaSimpleTypesToJSON;
var SecurityScheme_Type;
(function (SecurityScheme_Type) {
    SecurityScheme_Type[SecurityScheme_Type["TYPE_INVALID"] = 0] = "TYPE_INVALID";
    SecurityScheme_Type[SecurityScheme_Type["TYPE_BASIC"] = 1] = "TYPE_BASIC";
    SecurityScheme_Type[SecurityScheme_Type["TYPE_API_KEY"] = 2] = "TYPE_API_KEY";
    SecurityScheme_Type[SecurityScheme_Type["TYPE_OAUTH2"] = 3] = "TYPE_OAUTH2";
})(SecurityScheme_Type || (exports.SecurityScheme_Type = SecurityScheme_Type = {}));
function securityScheme_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case "TYPE_INVALID":
            return SecurityScheme_Type.TYPE_INVALID;
        case 1:
        case "TYPE_BASIC":
            return SecurityScheme_Type.TYPE_BASIC;
        case 2:
        case "TYPE_API_KEY":
            return SecurityScheme_Type.TYPE_API_KEY;
        case 3:
        case "TYPE_OAUTH2":
            return SecurityScheme_Type.TYPE_OAUTH2;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum SecurityScheme_Type");
    }
}
exports.securityScheme_TypeFromJSON = securityScheme_TypeFromJSON;
function securityScheme_TypeToJSON(object) {
    switch (object) {
        case SecurityScheme_Type.TYPE_INVALID:
            return "TYPE_INVALID";
        case SecurityScheme_Type.TYPE_BASIC:
            return "TYPE_BASIC";
        case SecurityScheme_Type.TYPE_API_KEY:
            return "TYPE_API_KEY";
        case SecurityScheme_Type.TYPE_OAUTH2:
            return "TYPE_OAUTH2";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum SecurityScheme_Type");
    }
}
exports.securityScheme_TypeToJSON = securityScheme_TypeToJSON;
var SecurityScheme_In;
(function (SecurityScheme_In) {
    SecurityScheme_In[SecurityScheme_In["IN_INVALID"] = 0] = "IN_INVALID";
    SecurityScheme_In[SecurityScheme_In["IN_QUERY"] = 1] = "IN_QUERY";
    SecurityScheme_In[SecurityScheme_In["IN_HEADER"] = 2] = "IN_HEADER";
})(SecurityScheme_In || (exports.SecurityScheme_In = SecurityScheme_In = {}));
function securityScheme_InFromJSON(object) {
    switch (object) {
        case 0:
        case "IN_INVALID":
            return SecurityScheme_In.IN_INVALID;
        case 1:
        case "IN_QUERY":
            return SecurityScheme_In.IN_QUERY;
        case 2:
        case "IN_HEADER":
            return SecurityScheme_In.IN_HEADER;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum SecurityScheme_In");
    }
}
exports.securityScheme_InFromJSON = securityScheme_InFromJSON;
function securityScheme_InToJSON(object) {
    switch (object) {
        case SecurityScheme_In.IN_INVALID:
            return "IN_INVALID";
        case SecurityScheme_In.IN_QUERY:
            return "IN_QUERY";
        case SecurityScheme_In.IN_HEADER:
            return "IN_HEADER";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum SecurityScheme_In");
    }
}
exports.securityScheme_InToJSON = securityScheme_InToJSON;
var SecurityScheme_Flow;
(function (SecurityScheme_Flow) {
    SecurityScheme_Flow[SecurityScheme_Flow["FLOW_INVALID"] = 0] = "FLOW_INVALID";
    SecurityScheme_Flow[SecurityScheme_Flow["FLOW_IMPLICIT"] = 1] = "FLOW_IMPLICIT";
    SecurityScheme_Flow[SecurityScheme_Flow["FLOW_PASSWORD"] = 2] = "FLOW_PASSWORD";
    SecurityScheme_Flow[SecurityScheme_Flow["FLOW_APPLICATION"] = 3] = "FLOW_APPLICATION";
    SecurityScheme_Flow[SecurityScheme_Flow["FLOW_ACCESS_CODE"] = 4] = "FLOW_ACCESS_CODE";
})(SecurityScheme_Flow || (exports.SecurityScheme_Flow = SecurityScheme_Flow = {}));
function securityScheme_FlowFromJSON(object) {
    switch (object) {
        case 0:
        case "FLOW_INVALID":
            return SecurityScheme_Flow.FLOW_INVALID;
        case 1:
        case "FLOW_IMPLICIT":
            return SecurityScheme_Flow.FLOW_IMPLICIT;
        case 2:
        case "FLOW_PASSWORD":
            return SecurityScheme_Flow.FLOW_PASSWORD;
        case 3:
        case "FLOW_APPLICATION":
            return SecurityScheme_Flow.FLOW_APPLICATION;
        case 4:
        case "FLOW_ACCESS_CODE":
            return SecurityScheme_Flow.FLOW_ACCESS_CODE;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum SecurityScheme_Flow");
    }
}
exports.securityScheme_FlowFromJSON = securityScheme_FlowFromJSON;
function securityScheme_FlowToJSON(object) {
    switch (object) {
        case SecurityScheme_Flow.FLOW_INVALID:
            return "FLOW_INVALID";
        case SecurityScheme_Flow.FLOW_IMPLICIT:
            return "FLOW_IMPLICIT";
        case SecurityScheme_Flow.FLOW_PASSWORD:
            return "FLOW_PASSWORD";
        case SecurityScheme_Flow.FLOW_APPLICATION:
            return "FLOW_APPLICATION";
        case SecurityScheme_Flow.FLOW_ACCESS_CODE:
            return "FLOW_ACCESS_CODE";
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum SecurityScheme_Flow");
    }
}
exports.securityScheme_FlowToJSON = securityScheme_FlowToJSON;
exports.Swagger = {
    fromJSON(object) {
        return {
            swagger: isSet(object.swagger) ? globalThis.String(object.swagger) : "",
            info: isSet(object.info) ? exports.Info.fromJSON(object.info) : undefined,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            basePath: isSet(object.basePath)
                ? globalThis.String(object.basePath)
                : "",
            schemes: globalThis.Array.isArray(object?.schemes)
                ? object.schemes.map((e) => schemeFromJSON(e))
                : [],
            consumes: globalThis.Array.isArray(object?.consumes)
                ? object.consumes.map((e) => globalThis.String(e))
                : [],
            produces: globalThis.Array.isArray(object?.produces)
                ? object.produces.map((e) => globalThis.String(e))
                : [],
            responses: isObject(object.responses)
                ? Object.entries(object.responses).reduce((acc, [key, value]) => {
                    acc[key] = exports.Response.fromJSON(value);
                    return acc;
                }, {})
                : {},
            securityDefinitions: isSet(object.securityDefinitions)
                ? exports.SecurityDefinitions.fromJSON(object.securityDefinitions)
                : undefined,
            security: globalThis.Array.isArray(object?.security)
                ? object.security.map((e) => exports.SecurityRequirement.fromJSON(e))
                : [],
            tags: globalThis.Array.isArray(object?.tags)
                ? object.tags.map((e) => exports.Tag.fromJSON(e))
                : [],
            externalDocs: isSet(object.externalDocs)
                ? exports.ExternalDocumentation.fromJSON(object.externalDocs)
                : undefined,
            extensions: isObject(object.extensions)
                ? Object.entries(object.extensions).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.swagger !== "") {
            obj.swagger = message.swagger;
        }
        if (message.info !== undefined) {
            obj.info = exports.Info.toJSON(message.info);
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.basePath !== "") {
            obj.basePath = message.basePath;
        }
        if (message.schemes?.length) {
            obj.schemes = message.schemes.map((e) => schemeToJSON(e));
        }
        if (message.consumes?.length) {
            obj.consumes = message.consumes;
        }
        if (message.produces?.length) {
            obj.produces = message.produces;
        }
        if (message.responses) {
            const entries = Object.entries(message.responses);
            if (entries.length > 0) {
                obj.responses = {};
                entries.forEach(([k, v]) => {
                    obj.responses[k] = exports.Response.toJSON(v);
                });
            }
        }
        if (message.securityDefinitions !== undefined) {
            obj.securityDefinitions = exports.SecurityDefinitions.toJSON(message.securityDefinitions);
        }
        if (message.security?.length) {
            obj.security = message.security.map((e) => exports.SecurityRequirement.toJSON(e));
        }
        if (message.tags?.length) {
            obj.tags = message.tags.map((e) => exports.Tag.toJSON(e));
        }
        if (message.externalDocs !== undefined) {
            obj.externalDocs = exports.ExternalDocumentation.toJSON(message.externalDocs);
        }
        if (message.extensions) {
            const entries = Object.entries(message.extensions);
            if (entries.length > 0) {
                obj.extensions = {};
                entries.forEach(([k, v]) => {
                    obj.extensions[k] = v;
                });
            }
        }
        return obj;
    },
};
exports.Swagger_ResponsesEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.Response.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.Response.toJSON(message.value);
        }
        return obj;
    },
};
exports.Swagger_ExtensionsEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
};
exports.Operation = {
    fromJSON(object) {
        return {
            tags: globalThis.Array.isArray(object?.tags)
                ? object.tags.map((e) => globalThis.String(e))
                : [],
            summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            externalDocs: isSet(object.externalDocs)
                ? exports.ExternalDocumentation.fromJSON(object.externalDocs)
                : undefined,
            operationId: isSet(object.operationId)
                ? globalThis.String(object.operationId)
                : "",
            consumes: globalThis.Array.isArray(object?.consumes)
                ? object.consumes.map((e) => globalThis.String(e))
                : [],
            produces: globalThis.Array.isArray(object?.produces)
                ? object.produces.map((e) => globalThis.String(e))
                : [],
            responses: isObject(object.responses)
                ? Object.entries(object.responses).reduce((acc, [key, value]) => {
                    acc[key] = exports.Response.fromJSON(value);
                    return acc;
                }, {})
                : {},
            schemes: globalThis.Array.isArray(object?.schemes)
                ? object.schemes.map((e) => schemeFromJSON(e))
                : [],
            deprecated: isSet(object.deprecated)
                ? globalThis.Boolean(object.deprecated)
                : false,
            security: globalThis.Array.isArray(object?.security)
                ? object.security.map((e) => exports.SecurityRequirement.fromJSON(e))
                : [],
            extensions: isObject(object.extensions)
                ? Object.entries(object.extensions).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
            parameters: isSet(object.parameters)
                ? exports.Parameters.fromJSON(object.parameters)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.summary !== "") {
            obj.summary = message.summary;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.externalDocs !== undefined) {
            obj.externalDocs = exports.ExternalDocumentation.toJSON(message.externalDocs);
        }
        if (message.operationId !== "") {
            obj.operationId = message.operationId;
        }
        if (message.consumes?.length) {
            obj.consumes = message.consumes;
        }
        if (message.produces?.length) {
            obj.produces = message.produces;
        }
        if (message.responses) {
            const entries = Object.entries(message.responses);
            if (entries.length > 0) {
                obj.responses = {};
                entries.forEach(([k, v]) => {
                    obj.responses[k] = exports.Response.toJSON(v);
                });
            }
        }
        if (message.schemes?.length) {
            obj.schemes = message.schemes.map((e) => schemeToJSON(e));
        }
        if (message.deprecated !== false) {
            obj.deprecated = message.deprecated;
        }
        if (message.security?.length) {
            obj.security = message.security.map((e) => exports.SecurityRequirement.toJSON(e));
        }
        if (message.extensions) {
            const entries = Object.entries(message.extensions);
            if (entries.length > 0) {
                obj.extensions = {};
                entries.forEach(([k, v]) => {
                    obj.extensions[k] = v;
                });
            }
        }
        if (message.parameters !== undefined) {
            obj.parameters = exports.Parameters.toJSON(message.parameters);
        }
        return obj;
    },
};
exports.Operation_ResponsesEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.Response.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.Response.toJSON(message.value);
        }
        return obj;
    },
};
exports.Operation_ExtensionsEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
};
exports.Parameters = {
    fromJSON(object) {
        return {
            headers: globalThis.Array.isArray(object?.headers)
                ? object.headers.map((e) => exports.HeaderParameter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.headers?.length) {
            obj.headers = message.headers.map((e) => exports.HeaderParameter.toJSON(e));
        }
        return obj;
    },
};
exports.HeaderParameter = {
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            type: isSet(object.type) ? headerParameter_TypeFromJSON(object.type) : 0,
            format: isSet(object.format) ? globalThis.String(object.format) : "",
            required: isSet(object.required)
                ? globalThis.Boolean(object.required)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.type !== 0) {
            obj.type = headerParameter_TypeToJSON(message.type);
        }
        if (message.format !== "") {
            obj.format = message.format;
        }
        if (message.required !== false) {
            obj.required = message.required;
        }
        return obj;
    },
};
exports.Header = {
    fromJSON(object) {
        return {
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            format: isSet(object.format) ? globalThis.String(object.format) : "",
            default: isSet(object.default) ? globalThis.String(object.default) : "",
            pattern: isSet(object.pattern) ? globalThis.String(object.pattern) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.format !== "") {
            obj.format = message.format;
        }
        if (message.default !== "") {
            obj.default = message.default;
        }
        if (message.pattern !== "") {
            obj.pattern = message.pattern;
        }
        return obj;
    },
};
exports.Response = {
    fromJSON(object) {
        return {
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            schema: isSet(object.schema) ? exports.Schema.fromJSON(object.schema) : undefined,
            headers: isObject(object.headers)
                ? Object.entries(object.headers).reduce((acc, [key, value]) => {
                    acc[key] = exports.Header.fromJSON(value);
                    return acc;
                }, {})
                : {},
            examples: isObject(object.examples)
                ? Object.entries(object.examples).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            extensions: isObject(object.extensions)
                ? Object.entries(object.extensions).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.schema !== undefined) {
            obj.schema = exports.Schema.toJSON(message.schema);
        }
        if (message.headers) {
            const entries = Object.entries(message.headers);
            if (entries.length > 0) {
                obj.headers = {};
                entries.forEach(([k, v]) => {
                    obj.headers[k] = exports.Header.toJSON(v);
                });
            }
        }
        if (message.examples) {
            const entries = Object.entries(message.examples);
            if (entries.length > 0) {
                obj.examples = {};
                entries.forEach(([k, v]) => {
                    obj.examples[k] = v;
                });
            }
        }
        if (message.extensions) {
            const entries = Object.entries(message.extensions);
            if (entries.length > 0) {
                obj.extensions = {};
                entries.forEach(([k, v]) => {
                    obj.extensions[k] = v;
                });
            }
        }
        return obj;
    },
};
exports.Response_HeadersEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.Header.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.Header.toJSON(message.value);
        }
        return obj;
    },
};
exports.Response_ExamplesEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
};
exports.Response_ExtensionsEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
};
exports.Info = {
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            termsOfService: isSet(object.termsOfService)
                ? globalThis.String(object.termsOfService)
                : "",
            contact: isSet(object.contact)
                ? exports.Contact.fromJSON(object.contact)
                : undefined,
            license: isSet(object.license)
                ? exports.License.fromJSON(object.license)
                : undefined,
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            extensions: isObject(object.extensions)
                ? Object.entries(object.extensions).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.termsOfService !== "") {
            obj.termsOfService = message.termsOfService;
        }
        if (message.contact !== undefined) {
            obj.contact = exports.Contact.toJSON(message.contact);
        }
        if (message.license !== undefined) {
            obj.license = exports.License.toJSON(message.license);
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.extensions) {
            const entries = Object.entries(message.extensions);
            if (entries.length > 0) {
                obj.extensions = {};
                entries.forEach(([k, v]) => {
                    obj.extensions[k] = v;
                });
            }
        }
        return obj;
    },
};
exports.Info_ExtensionsEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
};
exports.Contact = {
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        return obj;
    },
};
exports.License = {
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
};
exports.ExternalDocumentation = {
    fromJSON(object) {
        return {
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
};
exports.Schema = {
    fromJSON(object) {
        return {
            jsonSchema: isSet(object.jsonSchema)
                ? exports.JSONSchema.fromJSON(object.jsonSchema)
                : undefined,
            discriminator: isSet(object.discriminator)
                ? globalThis.String(object.discriminator)
                : "",
            readOnly: isSet(object.readOnly)
                ? globalThis.Boolean(object.readOnly)
                : false,
            externalDocs: isSet(object.externalDocs)
                ? exports.ExternalDocumentation.fromJSON(object.externalDocs)
                : undefined,
            example: isSet(object.example) ? globalThis.String(object.example) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.jsonSchema !== undefined) {
            obj.jsonSchema = exports.JSONSchema.toJSON(message.jsonSchema);
        }
        if (message.discriminator !== "") {
            obj.discriminator = message.discriminator;
        }
        if (message.readOnly !== false) {
            obj.readOnly = message.readOnly;
        }
        if (message.externalDocs !== undefined) {
            obj.externalDocs = exports.ExternalDocumentation.toJSON(message.externalDocs);
        }
        if (message.example !== "") {
            obj.example = message.example;
        }
        return obj;
    },
};
exports.JSONSchema = {
    fromJSON(object) {
        return {
            ref: isSet(object.ref) ? globalThis.String(object.ref) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            default: isSet(object.default) ? globalThis.String(object.default) : "",
            readOnly: isSet(object.readOnly)
                ? globalThis.Boolean(object.readOnly)
                : false,
            example: isSet(object.example) ? globalThis.String(object.example) : "",
            multipleOf: isSet(object.multipleOf)
                ? globalThis.Number(object.multipleOf)
                : 0,
            maximum: isSet(object.maximum) ? globalThis.Number(object.maximum) : 0,
            exclusiveMaximum: isSet(object.exclusiveMaximum)
                ? globalThis.Boolean(object.exclusiveMaximum)
                : false,
            minimum: isSet(object.minimum) ? globalThis.Number(object.minimum) : 0,
            exclusiveMinimum: isSet(object.exclusiveMinimum)
                ? globalThis.Boolean(object.exclusiveMinimum)
                : false,
            maxLength: isSet(object.maxLength)
                ? globalThis.Number(object.maxLength)
                : 0,
            minLength: isSet(object.minLength)
                ? globalThis.Number(object.minLength)
                : 0,
            pattern: isSet(object.pattern) ? globalThis.String(object.pattern) : "",
            maxItems: isSet(object.maxItems) ? globalThis.Number(object.maxItems) : 0,
            minItems: isSet(object.minItems) ? globalThis.Number(object.minItems) : 0,
            uniqueItems: isSet(object.uniqueItems)
                ? globalThis.Boolean(object.uniqueItems)
                : false,
            maxProperties: isSet(object.maxProperties)
                ? globalThis.Number(object.maxProperties)
                : 0,
            minProperties: isSet(object.minProperties)
                ? globalThis.Number(object.minProperties)
                : 0,
            required: globalThis.Array.isArray(object?.required)
                ? object.required.map((e) => globalThis.String(e))
                : [],
            array: globalThis.Array.isArray(object?.array)
                ? object.array.map((e) => globalThis.String(e))
                : [],
            type: globalThis.Array.isArray(object?.type)
                ? object.type.map((e) => jSONSchema_JSONSchemaSimpleTypesFromJSON(e))
                : [],
            format: isSet(object.format) ? globalThis.String(object.format) : "",
            enum: globalThis.Array.isArray(object?.enum)
                ? object.enum.map((e) => globalThis.String(e))
                : [],
            fieldConfiguration: isSet(object.fieldConfiguration)
                ? exports.JSONSchema_FieldConfiguration.fromJSON(object.fieldConfiguration)
                : undefined,
            extensions: isObject(object.extensions)
                ? Object.entries(object.extensions).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ref !== "") {
            obj.ref = message.ref;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.default !== "") {
            obj.default = message.default;
        }
        if (message.readOnly !== false) {
            obj.readOnly = message.readOnly;
        }
        if (message.example !== "") {
            obj.example = message.example;
        }
        if (message.multipleOf !== 0) {
            obj.multipleOf = message.multipleOf;
        }
        if (message.maximum !== 0) {
            obj.maximum = message.maximum;
        }
        if (message.exclusiveMaximum !== false) {
            obj.exclusiveMaximum = message.exclusiveMaximum;
        }
        if (message.minimum !== 0) {
            obj.minimum = message.minimum;
        }
        if (message.exclusiveMinimum !== false) {
            obj.exclusiveMinimum = message.exclusiveMinimum;
        }
        if (message.maxLength !== 0) {
            obj.maxLength = Math.round(message.maxLength);
        }
        if (message.minLength !== 0) {
            obj.minLength = Math.round(message.minLength);
        }
        if (message.pattern !== "") {
            obj.pattern = message.pattern;
        }
        if (message.maxItems !== 0) {
            obj.maxItems = Math.round(message.maxItems);
        }
        if (message.minItems !== 0) {
            obj.minItems = Math.round(message.minItems);
        }
        if (message.uniqueItems !== false) {
            obj.uniqueItems = message.uniqueItems;
        }
        if (message.maxProperties !== 0) {
            obj.maxProperties = Math.round(message.maxProperties);
        }
        if (message.minProperties !== 0) {
            obj.minProperties = Math.round(message.minProperties);
        }
        if (message.required?.length) {
            obj.required = message.required;
        }
        if (message.array?.length) {
            obj.array = message.array;
        }
        if (message.type?.length) {
            obj.type = message.type.map((e) => jSONSchema_JSONSchemaSimpleTypesToJSON(e));
        }
        if (message.format !== "") {
            obj.format = message.format;
        }
        if (message.enum?.length) {
            obj.enum = message.enum;
        }
        if (message.fieldConfiguration !== undefined) {
            obj.fieldConfiguration = exports.JSONSchema_FieldConfiguration.toJSON(message.fieldConfiguration);
        }
        if (message.extensions) {
            const entries = Object.entries(message.extensions);
            if (entries.length > 0) {
                obj.extensions = {};
                entries.forEach(([k, v]) => {
                    obj.extensions[k] = v;
                });
            }
        }
        return obj;
    },
};
exports.JSONSchema_FieldConfiguration = {
    fromJSON(object) {
        return {
            pathParamName: isSet(object.pathParamName)
                ? globalThis.String(object.pathParamName)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pathParamName !== "") {
            obj.pathParamName = message.pathParamName;
        }
        return obj;
    },
};
exports.JSONSchema_ExtensionsEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
};
exports.Tag = {
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            externalDocs: isSet(object.externalDocs)
                ? exports.ExternalDocumentation.fromJSON(object.externalDocs)
                : undefined,
            extensions: isObject(object.extensions)
                ? Object.entries(object.extensions).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.externalDocs !== undefined) {
            obj.externalDocs = exports.ExternalDocumentation.toJSON(message.externalDocs);
        }
        if (message.extensions) {
            const entries = Object.entries(message.extensions);
            if (entries.length > 0) {
                obj.extensions = {};
                entries.forEach(([k, v]) => {
                    obj.extensions[k] = v;
                });
            }
        }
        return obj;
    },
};
exports.Tag_ExtensionsEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
};
exports.SecurityDefinitions = {
    fromJSON(object) {
        return {
            security: isObject(object.security)
                ? Object.entries(object.security).reduce((acc, [key, value]) => {
                    acc[key] = exports.SecurityScheme.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.security) {
            const entries = Object.entries(message.security);
            if (entries.length > 0) {
                obj.security = {};
                entries.forEach(([k, v]) => {
                    obj.security[k] = exports.SecurityScheme.toJSON(v);
                });
            }
        }
        return obj;
    },
};
exports.SecurityDefinitions_SecurityEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value)
                ? exports.SecurityScheme.fromJSON(object.value)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.SecurityScheme.toJSON(message.value);
        }
        return obj;
    },
};
exports.SecurityScheme = {
    fromJSON(object) {
        return {
            type: isSet(object.type) ? securityScheme_TypeFromJSON(object.type) : 0,
            description: isSet(object.description)
                ? globalThis.String(object.description)
                : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            in: isSet(object.in) ? securityScheme_InFromJSON(object.in) : 0,
            flow: isSet(object.flow) ? securityScheme_FlowFromJSON(object.flow) : 0,
            authorizationUrl: isSet(object.authorizationUrl)
                ? globalThis.String(object.authorizationUrl)
                : "",
            tokenUrl: isSet(object.tokenUrl)
                ? globalThis.String(object.tokenUrl)
                : "",
            scopes: isSet(object.scopes) ? exports.Scopes.fromJSON(object.scopes) : undefined,
            extensions: isObject(object.extensions)
                ? Object.entries(object.extensions).reduce((acc, [key, value]) => {
                    acc[key] = value;
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = securityScheme_TypeToJSON(message.type);
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.in !== 0) {
            obj.in = securityScheme_InToJSON(message.in);
        }
        if (message.flow !== 0) {
            obj.flow = securityScheme_FlowToJSON(message.flow);
        }
        if (message.authorizationUrl !== "") {
            obj.authorizationUrl = message.authorizationUrl;
        }
        if (message.tokenUrl !== "") {
            obj.tokenUrl = message.tokenUrl;
        }
        if (message.scopes !== undefined) {
            obj.scopes = exports.Scopes.toJSON(message.scopes);
        }
        if (message.extensions) {
            const entries = Object.entries(message.extensions);
            if (entries.length > 0) {
                obj.extensions = {};
                entries.forEach(([k, v]) => {
                    obj.extensions[k] = v;
                });
            }
        }
        return obj;
    },
};
exports.SecurityScheme_ExtensionsEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
};
exports.SecurityRequirement = {
    fromJSON(object) {
        return {
            securityRequirement: isObject(object.securityRequirement)
                ? Object.entries(object.securityRequirement).reduce((acc, [key, value]) => {
                    acc[key] =
                        exports.SecurityRequirement_SecurityRequirementValue.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.securityRequirement) {
            const entries = Object.entries(message.securityRequirement);
            if (entries.length > 0) {
                obj.securityRequirement = {};
                entries.forEach(([k, v]) => {
                    obj.securityRequirement[k] =
                        exports.SecurityRequirement_SecurityRequirementValue.toJSON(v);
                });
            }
        }
        return obj;
    },
};
exports.SecurityRequirement_SecurityRequirementValue = {
    fromJSON(object) {
        return {
            scope: globalThis.Array.isArray(object?.scope)
                ? object.scope.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.scope?.length) {
            obj.scope = message.scope;
        }
        return obj;
    },
};
exports.SecurityRequirement_SecurityRequirementEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value)
                ? exports.SecurityRequirement_SecurityRequirementValue.fromJSON(object.value)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.SecurityRequirement_SecurityRequirementValue.toJSON(message.value);
        }
        return obj;
    },
};
exports.Scopes = {
    fromJSON(object) {
        return {
            scope: isObject(object.scope)
                ? Object.entries(object.scope).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.scope) {
            const entries = Object.entries(message.scope);
            if (entries.length > 0) {
                obj.scope = {};
                entries.forEach(([k, v]) => {
                    obj.scope[k] = v;
                });
            }
        }
        return obj;
    },
};
exports.Scopes_ScopeEntry = {
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=openapiv2.js.map